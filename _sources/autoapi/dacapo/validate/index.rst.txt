dacapo.validate
===============

.. py:module:: dacapo.validate


Attributes
----------

.. autoapisummary::

   dacapo.validate.logger
   dacapo.validate.parser


Classes
-------

.. autoapisummary::

   dacapo.validate.ValidationIterationScores
   dacapo.validate.ZarrArray


Functions
---------

.. autoapisummary::

   dacapo.validate.predict
   dacapo.validate.create_array_store
   dacapo.validate.create_config_store
   dacapo.validate.create_stats_store
   dacapo.validate.create_weights_store
   dacapo.validate.validate_run
   dacapo.validate.validate


Module Contents
---------------

.. py:function:: predict(run_name: str | dacapo.experiments.Run, iteration: int | None, input_container: upath.UPath | str, input_dataset: str, output_path: dacapo.store.local_array_store.LocalArrayIdentifier | upath.UPath | str, output_roi: Optional[funlib.geometry.Roi | str] = None, num_workers: int = 12, output_dtype: numpy.dtype | str = np.uint8, overwrite: bool = True)

   Predict with a trained model.

   :param run_name: The name of the run to predict with or the Run object.
   :type run_name: str or Run
   :param iteration: The training iteration of the model to use for prediction.
   :type iteration: int or None
   :param input_container: The container of the input array.
   :type input_container: Path | str
   :param input_dataset: The dataset name of the input array.
   :type input_dataset: str
   :param output_path: The path where the prediction array will be stored, or a LocalArryIdentifier for the prediction array.
   :type output_path: LocalArrayIdentifier | str
   :param output_roi: The ROI of the output array. If None, the ROI of the input array will be used. Defaults to None.
   :type output_roi: Optional[Roi | str], optional
   :param num_workers: The number of workers to use for blockwise prediction. Defaults to 1 for local processing, otherwise 12.
   :type num_workers: int, optional
   :param output_dtype: The dtype of the output array. Defaults to np.uint8.
   :type output_dtype: np.dtype | str, optional
   :param overwrite: If True, the output array will be overwritten if it already exists. Defaults to True.
   :type overwrite: bool, optional

   :raises ValueError: If run_name is not found in config store

   .. rubric:: Examples

   >>> predict("run_name", 100, "input.zarr", "raw", "output.zarr", output_roi="[0:100,0:100,0:100]")


.. py:class:: ValidationIterationScores

   A class used to represent the validation iteration scores in an organized structure.

   .. attribute:: iteration

      The iteration associated with these validation scores.

      :type: int

   .. attribute:: scores

      A list of scores per dataset, post processor

      :type: List[List[List[float]]]

   .. attribute:: parameters, and evaluation criterion.

      

   .. note::

      The scores list is structured as follows:
      - The outer list contains the scores for each dataset.
      - The middle list contains the scores for each post processor parameter.
      - The inner list contains the scores for each evaluation criterion.


   .. py:attribute:: iteration
      :type:  int


   .. py:attribute:: scores
      :type:  List[List[List[float]]]


.. py:class:: ZarrArray(array_config)



   This is a zarr array.

   .. attribute:: name

      The name of the array.

      :type: str

   .. attribute:: file_name

      The file name of the array.

      :type: Path

   .. attribute:: dataset

      The dataset name.

      :type: str

   .. attribute:: _axes

      The axes of the array.

      :type: Optional[List[str]]

   .. attribute:: snap_to_grid

      The snap to grid.

      :type: Optional[Coordinate]

   .. method:: __init__(array_config)

      
      Initializes the array type 'raw' and name for the DummyDataset instance.

   .. method:: __str__()

      
      Returns the string representation of the ZarrArray.

   .. method:: __repr__()

      
      Returns the string representation of the ZarrArray.

   .. method:: attrs()

      
      Returns the attributes of the array.

   .. method:: axes()

      
      Returns the axes of the array.

   .. method:: dims()

      
      Returns the dimensions of the array.

   .. method:: _daisy_array()

      
      Returns the daisy array.

   .. method:: voxel_size()

      
      Returns the voxel size of the array.

   .. method:: roi()

      
      Returns the region of interest of the array.

   .. method:: writable()

      
      Returns the boolean value of the array.

   .. method:: dtype()

      
      Returns the data type of the array.

   .. method:: num_channels()

      
      Returns the number of channels of the array.

   .. method:: spatial_axes()

      
      Returns the spatial axes of the array.

   .. method:: data()

      
      Returns the data of the array.

   .. method:: __getitem__(roi)

      
      Returns the data of the array for the given region of interest.

   .. method:: __setitem__(roi, value)

      
      Sets the data of the array for the given region of interest.

   .. method:: create_from_array_identifier(array_identifier, axes, roi, num_channels, voxel_size, dtype, write_size=None, name=None, overwrite=False)

      
      Creates a new ZarrArray given an array identifier.

   .. method:: open_from_array_identifier(array_identifier, name="")

      
      Opens a new ZarrArray given an array identifier.

   .. method:: _can_neuroglance()

      
      Returns the boolean value of the array.

   .. method:: _neuroglancer_source()

      
      Returns the neuroglancer source of the array.

   .. method:: _neuroglancer_layer()

      
      Returns the neuroglancer layer of the array.

   .. method:: _transform_matrix()

      
      Returns the transform matrix of the array.

   .. method:: _output_dimensions()

      
      Returns the output dimensions of the array.

   .. method:: _source_name()

      
      Returns the source name of the array.

   .. method:: add_metadata(metadata)

      
      Adds metadata to the array.

   .. rubric:: Notes

   This class is used to create a zarr array.


   .. py:property:: mode


   .. py:property:: attrs
      Returns the attributes of the array.

      :param attrs: The attributes of the array.
      :type attrs: Any

      :returns: The attributes of the array.
      :rtype: Any

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> attrs()

      .. rubric:: Notes

      This method is used to return the attributes of the array.


   .. py:property:: axes
      Returns the axes of the array.

      :param axes: The axes of the array.
      :type axes: List[str]

      :returns: The axes of the array.
      :rtype: List[str]

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> axes()

      .. rubric:: Notes

      This method is used to return the axes of the array.


   .. py:property:: dims
      :type: int

      Returns the dimensions of the array.

      :param dims: The dimensions of the array.
      :type dims: int

      :returns: The dimensions of the array.
      :rtype: int

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> dims()

      .. rubric:: Notes

      This method is used to return the dimensions of the array.


   .. py:method:: voxel_size() -> funlib.geometry.Coordinate

      Returns the voxel size of the array.

      :param voxel_size: The voxel size.
      :type voxel_size: Coordinate

      :returns: The voxel size of the array.
      :rtype: Coordinate

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> voxel_size()

      .. rubric:: Notes

      This method is used to return the voxel size of the array.



   .. py:method:: roi() -> funlib.geometry.Roi

      Returns the region of interest of the array.

      :param roi: The region of interest.
      :type roi: Roi

      :returns: The region of interest of the array.
      :rtype: Roi

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> roi()

      .. rubric:: Notes

      This method is used to return the region of interest of the array.



   .. py:property:: writable
      :type: bool

      Returns the boolean value of the array.

      :param writable: The boolean value of the array.
      :type writable: bool

      :returns: The boolean value of the array.
      :rtype: bool

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> writable()

      .. rubric:: Notes

      This method is used to return the boolean value of the array.


   .. py:property:: dtype
      :type: Any

      Returns the data type of the array.

      :param dtype: The data type of the array.
      :type dtype: Any

      :returns: The data type of the array.
      :rtype: Any

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> dtype()

      .. rubric:: Notes

      This method is used to return the data type of the array.


   .. py:property:: num_channels
      :type: Optional[int]

      Returns the number of channels of the array.

      :param num_channels: The number of channels of the array.
      :type num_channels: Optional[int]

      :returns: The number of channels of the array.
      :rtype: Optional[int]

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> num_channels()

      .. rubric:: Notes

      This method is used to return the number of channels of the array.


   .. py:property:: spatial_axes
      :type: List[str]

      Returns the spatial axes of the array.

      :param spatial_axes: The spatial axes of the array.
      :type spatial_axes: List[str]

      :returns: The spatial axes of the array.
      :rtype: List[str]

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> spatial_axes()

      .. rubric:: Notes

      This method is used to return the spatial axes of the array.


   .. py:property:: data
      :type: Any

      Returns the data of the array.

      :param data: The data of the array.
      :type data: Any

      :returns: The data of the array.
      :rtype: Any

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> data()

      .. rubric:: Notes

      This method is used to return the data of the array.


   .. py:method:: create_from_array_identifier(array_identifier, axes, roi, num_channels, voxel_size, dtype, mode='a', write_size=None, name=None, overwrite=False)
      :classmethod:


      Create a new ZarrArray given an array identifier. It is assumed that
      this array_identifier points to a dataset that does not yet exist.

      :param array_identifier: The array identifier.
      :type array_identifier: ArrayIdentifier
      :param axes: The axes of the array.
      :type axes: List[str]
      :param roi: The region of interest.
      :type roi: Roi
      :param num_channels: The number of channels.
      :type num_channels: int
      :param voxel_size: The voxel size.
      :type voxel_size: Coordinate
      :param dtype: The data type.
      :type dtype: Any
      :param write_size: The write size.
      :type write_size: Optional[Coordinate]
      :param name: The name of the array.
      :type name: Optional[str]
      :param overwrite: The boolean value to overwrite the array.
      :type overwrite: bool

      :returns: The ZarrArray.
      :rtype: ZarrArray

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> create_from_array_identifier(array_identifier, axes, roi, num_channels, voxel_size, dtype, write_size=None, name=None, overwrite=False)

      .. rubric:: Notes

      This method is used to create a new ZarrArray given an array identifier.



   .. py:method:: open_from_array_identifier(array_identifier, name='')
      :classmethod:


      Opens a new ZarrArray given an array identifier.

      :param array_identifier: The array identifier.
      :type array_identifier: ArrayIdentifier
      :param name: The name of the array.
      :type name: str

      :returns: The ZarrArray.
      :rtype: ZarrArray

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> open_from_array_identifier(array_identifier, name="")

      .. rubric:: Notes

      This method is used to open a new ZarrArray given an array identifier.



   .. py:method:: add_metadata(metadata: Dict[str, Any]) -> None

      Adds metadata to the array.

      :param metadata: The metadata to add to the array.
      :type metadata: Dict[str, Any]

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> add_metadata(metadata)

      .. rubric:: Notes

      This method is used to add metadata to the array.



.. py:function:: create_array_store()

   Create an array store based on the global DaCapo options.

   :param options: The global DaCapo options.
   :type options: Options

   :returns: The created array store.
   :rtype: ArrayStore

   :raises ValueError: If the store type is not supported.

   .. rubric:: Examples

   >>> create_array_store()
   <dacapo.store.local_array_store.LocalArrayStore object at 0x7f2e4f8e9e80>

   .. note:: Currently, only the LocalArrayStore is supported.


.. py:function:: create_config_store()

   Create a config store based on the global DaCapo options.

   :returns: The created config store.
   :rtype: ConfigStore

   :raises ValueError: If the store type is not supported.

   .. rubric:: Examples

   >>> create_config_store()
   <dacapo.store.file_config_store.FileConfigStore object at 0x7f2e4f8e9e80>

   .. note:: Currently, only the FileConfigStore and MongoConfigStore are supported.


.. py:function:: create_stats_store()

   Create a statistics store based on the global DaCapo options.

   :param options: The global DaCapo options.
   :type options: Options

   :returns: The created statistics store.
   :rtype: StatsStore

   :raises ValueError: If the store type is not supported.

   .. rubric:: Examples

   >>> create_stats_store()
   <dacapo.store.file_stats_store.FileStatsStore object at 0x7f2e4f8e9e80>

   .. note:: Currently, only the FileStatsStore and MongoStatsStore are supported.


.. py:function:: create_weights_store()

   Create a weights store based on the global DaCapo options.

   :param options: The global DaCapo options.
   :type options: Options

   :returns: The created weights store.
   :rtype: WeightsStore

   .. rubric:: Examples

   >>> create_weights_store()
   <dacapo.store.local_weights_store.LocalWeightsStore object at 0x7f2e4f8e9e80>

   .. note:: Currently, only the LocalWeightsStore is supported.


.. py:data:: logger

.. py:function:: validate_run(run: dacapo.experiments.Run, iteration: int, num_workers: int = 1, output_dtype: str = 'uint8', overwrite: bool = True)

   validate_run is deprecated and will be removed in a future version. Please use validate instead.


.. py:function:: validate(run_name: str | dacapo.experiments.Run, iteration: int, num_workers: int = 1, output_dtype: str = 'uint8', overwrite: bool = True)

   Validate a run at a given iteration. Loads the weights from a previously
   stored checkpoint. Returns the best parameters and scores for this
   iteration.

   :param run_name: The name of the run to validate.
   :param iteration: The iteration to validate.
   :param num_workers: The number of workers to use for validation.
   :param output_dtype: The dtype to use for the output arrays.
   :param overwrite: Whether to overwrite existing output arrays

   :returns: The best parameters and scores for this iteration

   :raises ValueError: If the run does not have a validation dataset or the dataset does not have ground truth.

   .. rubric:: Example

   validate("my_run", 1000)


.. py:data:: parser

