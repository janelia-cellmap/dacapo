dacapo.train
============

.. py:module:: dacapo.train


Attributes
----------

.. autoapisummary::

   dacapo.train.logger


Functions
---------

.. autoapisummary::

   dacapo.train.create_compute_context
   dacapo.train.create_array_store
   dacapo.train.create_config_store
   dacapo.train.create_stats_store
   dacapo.train.create_weights_store
   dacapo.train.validate
   dacapo.train.train
   dacapo.train.train_run


Module Contents
---------------

.. py:function:: create_compute_context() -> ComputeContext

   Create a compute context based on the global DaCapo options.

   :returns: The compute context object.
   :rtype: ComputeContext

   :raises ValueError: If the store type is unknown.

   .. rubric:: Examples

   >>> context = create_compute_context()

   .. note:: The method is implemented in the module.


.. py:function:: create_array_store()

   Create an array store based on the global DaCapo options.

   :param options: The global DaCapo options.
   :type options: Options

   :returns: The created array store.
   :rtype: ArrayStore

   :raises ValueError: If the store type is not supported.

   .. rubric:: Examples

   >>> create_array_store()
   <dacapo.store.local_array_store.LocalArrayStore object at 0x7f2e4f8e9e80>

   .. note:: Currently, only the LocalArrayStore is supported.


.. py:function:: create_config_store()

   Create a config store based on the global DaCapo options.

   :returns: The created config store.
   :rtype: ConfigStore

   :raises ValueError: If the store type is not supported.

   .. rubric:: Examples

   >>> create_config_store()
   <dacapo.store.file_config_store.FileConfigStore object at 0x7f2e4f8e9e80>

   .. note:: Currently, only the FileConfigStore and MongoConfigStore are supported.


.. py:function:: create_stats_store()

   Create a statistics store based on the global DaCapo options.

   :param options: The global DaCapo options.
   :type options: Options

   :returns: The created statistics store.
   :rtype: StatsStore

   :raises ValueError: If the store type is not supported.

   .. rubric:: Examples

   >>> create_stats_store()
   <dacapo.store.file_stats_store.FileStatsStore object at 0x7f2e4f8e9e80>

   .. note:: Currently, only the FileStatsStore and MongoStatsStore are supported.


.. py:function:: create_weights_store()

   Create a weights store based on the global DaCapo options.

   :param options: The global DaCapo options.
   :type options: Options

   :returns: The created weights store.
   :rtype: WeightsStore

   .. rubric:: Examples

   >>> create_weights_store()
   <dacapo.store.local_weights_store.LocalWeightsStore object at 0x7f2e4f8e9e80>

   .. note:: Currently, only the LocalWeightsStore is supported.


.. py:function:: validate(run_name: str | dacapo.experiments.Run, iteration: int, num_workers: int = 1, output_dtype: str = 'uint8', overwrite: bool = True)

   Validate a run at a given iteration. Loads the weights from a previously
   stored checkpoint. Returns the best parameters and scores for this
   iteration.

   :param run_name: The name of the run to validate.
   :param iteration: The iteration to validate.
   :param num_workers: The number of workers to use for validation.
   :param output_dtype: The dtype to use for the output arrays.
   :param overwrite: Whether to overwrite existing output arrays

   :returns: The best parameters and scores for this iteration

   :raises ValueError: If the run does not have a validation dataset or the dataset does not have ground truth.

   .. rubric:: Example

   validate("my_run", 1000)


.. py:data:: logger

.. py:function:: train(run_name: str)

   Train a run

   :param run_name: Name of the run to train

   :raises ValueError: If run_name is not found in config store

   .. rubric:: Examples

   >>> train("run_name")


.. py:function:: train_run(run: dacapo.experiments.Run)

   Train a run

   :param run: Run object to train

   :raises ValueError: If run_name is not found in config store


