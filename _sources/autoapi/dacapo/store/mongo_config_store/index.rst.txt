dacapo.store.mongo_config_store
===============================

.. py:module:: dacapo.store.mongo_config_store


Attributes
----------

.. autoapisummary::

   dacapo.store.mongo_config_store.converter
   dacapo.store.mongo_config_store.logger


Exceptions
----------

.. autoapisummary::

   dacapo.store.mongo_config_store.DuplicateNameError


Classes
-------

.. autoapisummary::

   dacapo.store.mongo_config_store.ConfigStore
   dacapo.store.mongo_config_store.RunConfig
   dacapo.store.mongo_config_store.ArchitectureConfig
   dacapo.store.mongo_config_store.DataSplitConfig
   dacapo.store.mongo_config_store.DatasetConfig
   dacapo.store.mongo_config_store.ArrayConfig
   dacapo.store.mongo_config_store.TaskConfig
   dacapo.store.mongo_config_store.TrainerConfig
   dacapo.store.mongo_config_store.MongoConfigStore


Module Contents
---------------

.. py:class:: ConfigStore



   Base class for configuration stores.

   .. attribute:: runs

      The runs store.

      :type: Any

   .. attribute:: datasplits

      The datasplits store.

      :type: Any

   .. attribute:: datasets

      The datasets store.

      :type: Any

   .. attribute:: arrays

      The arrays store.

      :type: Any

   .. attribute:: tasks

      The tasks store.

      :type: Any

   .. attribute:: trainers

      The trainers store.

      :type: Any

   .. attribute:: architectures

      The architectures store.

      :type: Any

   .. method:: delete_config

      Delete a config from a store.

   .. method:: store_run_config

      Store a run config.

   .. method:: retrieve_run_config

      Retrieve a run config from a run name.

   .. method:: retrieve_run_config_names

      Retrieve all run config names.

   .. method:: delete_run_config

      Delete a run config.

   .. method:: store_task_config

      Store a task config.

   .. method:: retrieve_task_config

      Retrieve a task config from a task name.

   .. method:: retrieve_task_config_names

      Retrieve all task config names.

   .. method:: delete_task_config

      Delete a task config.

   .. method:: store_architecture_config

      Store a architecture config.

   .. method:: retrieve_architecture_config

      Retrieve a architecture config from a architecture name.

   .. method:: retrieve_architecture_config_names

      Retrieve all architecture config names.

   .. method:: delete_architecture_config

      Delete a architecture config.

   .. method:: store_trainer_config

      Store a trainer config.

   .. method:: retrieve_trainer_config

      Retrieve a trainer config from a trainer name.

   .. method:: retrieve_trainer_config_names

      Retrieve all trainer config names.

   .. method:: delete_trainer_config

      Delete a trainer config.

   .. method:: store_datasplit_config

      Store a datasplit config.

   .. method:: retrieve_datasplit_config

      Retrieve a datasplit config from a datasplit name.

   .. method:: retrieve_datasplit_config_names

      Retrieve all datasplit names.

   .. method:: delete_datasplit_config

      Delete a datasplit config.

   .. method:: store_array_config

      Store a array config.

   .. method:: retrieve_array_config

      Retrieve a array config from a array name.

   .. method:: retrieve_array_config_names

      Retrieve all array names.

   .. method:: delete_array_config

      Delete a array config.

   .. note::

      This class is an abstract base class for configuration stores. It
      defines the interface for storing and retrieving configuration objects
      (e.g., run, task, architecture, trainer, datasplit, dataset, array
      configs). Concrete implementations of this class should define how
      these objects are stored and retrieved (e.g., in a database, in files).


   .. py:attribute:: runs
      :type:  Any


   .. py:attribute:: datasplits
      :type:  Any


   .. py:attribute:: datasets
      :type:  Any


   .. py:attribute:: arrays
      :type:  Any


   .. py:attribute:: tasks
      :type:  Any


   .. py:attribute:: trainers
      :type:  Any


   .. py:attribute:: architectures
      :type:  Any


   .. py:method:: delete_config(database, config_name: str) -> None
      :abstractmethod:


      Delete a config from a store.

      :param database: The store to delete the config from.
      :type database: Any
      :param config_name: The name of the config to delete.
      :type config_name: str

      :raises KeyError: If the config does not exist.

      .. rubric:: Examples

      >>> store.delete_config(store.runs, "run1")



   .. py:method:: store_run_config(run_config: dacapo.experiments.run_config.RunConfig) -> None
      :abstractmethod:


      Store a run config. This should also store the configs that are part
      of the run config (i.e., task, architecture, trainer, and dataset
      config).

      :param run_config: The run config to store.
      :type run_config: RunConfig

      :raises DuplicateNameError: If a run config with the same name already
          exists.

      .. rubric:: Examples

      >>> store.store_run_config(run_config)



   .. py:method:: retrieve_run_config(run_name: str) -> dacapo.experiments.run_config.RunConfig
      :abstractmethod:


      Retrieve a run config from a run name.

      :param run_name: The name of the run config to retrieve.
      :type run_name: str

      :returns: The run config with the given name.
      :rtype: RunConfig

      :raises KeyError: If the run config does not exist.

      .. rubric:: Examples

      >>> run_config = store.retrieve_run_config("run1")



   .. py:method:: retrieve_run_config_names() -> List[str]
      :abstractmethod:


      Retrieve all run config names.

      :returns: The names of all run configs.
      :rtype: List[str]

      :raises KeyError: If no run configs exist.

      .. rubric:: Examples

      >>> run_names = store.retrieve_run_config_names()



   .. py:method:: delete_run_config(run_name: str) -> None

      Delete a run config from the store.

      :param run_name: The name of the run config to delete.
      :type run_name: str

      :raises KeyError: If the run config does not exist.

      .. rubric:: Examples

      >>> store.delete_run_config("run1")



   .. py:method:: store_task_config(task_config: dacapo.experiments.tasks.task_config.TaskConfig) -> None
      :abstractmethod:


      Store a task config.

      :param task_config: The task config to store.
      :type task_config: TaskConfig

      :raises DuplicateNameError: If a task config with the same name already
          exists.

      .. rubric:: Examples

      >>> store.store_task_config(task_config)



   .. py:method:: retrieve_task_config(task_name: str) -> dacapo.experiments.tasks.task_config.TaskConfig
      :abstractmethod:


      Retrieve a task config from a task name.

      :param task_name: The name of the task config to retrieve.
      :type task_name: str

      :returns: The task config with the given name.
      :rtype: TaskConfig

      :raises KeyError: If the task config does not exist.

      .. rubric:: Examples

      >>> task_config = store.retrieve_task_config("task1")



   .. py:method:: retrieve_task_config_names() -> List[str]
      :abstractmethod:


      Retrieve all task config names.

      :param List[str]: The names of all task configs.

      :returns: The names of all task configs.
      :rtype: List[str]

      :raises KeyError: If no task configs exist.

      .. rubric:: Examples

      >>> task_names = store.retrieve_task_config_names()



   .. py:method:: delete_task_config(task_name: str) -> None

      Delete a task config from the store.

      :param task_name: The name of the task config to delete.
      :type task_name: str

      :raises KeyError: If the task config does not exist.

      .. rubric:: Examples

      >>> store.delete_task_config("task1")



   .. py:method:: store_architecture_config(architecture_config: dacapo.experiments.architectures.architecture_config.ArchitectureConfig) -> None
      :abstractmethod:


      Store a architecture config.

      :param architecture_config: The architecture config
                                  to store.
      :type architecture_config: ArchitectureConfig

      :raises DuplicateNameError: If a architecture config with the same name
          already exists.

      .. rubric:: Examples

      >>> store.store_architecture_config(architecture_config)



   .. py:method:: retrieve_architecture_config(architecture_name: str) -> dacapo.experiments.architectures.architecture_config.ArchitectureConfig
      :abstractmethod:


      Retrieve a architecture config from a architecture name.

      :param architecture_name: The name of the architecture config to
                                retrieve.
      :type architecture_name: str

      :returns: The architecture config with the given name.
      :rtype: ArchitectureConfig

      :raises KeyError: If the architecture config does not exist.

      .. rubric:: Examples

      >>> architecture_config = store.retrieve_architecture_config("architecture1")



   .. py:method:: retrieve_architecture_config_names() -> List[str]
      :abstractmethod:


      Retrieve all architecture config names.

      :param List[str]: The names of all architecture configs.

      :returns: The names of all architecture configs.
      :rtype: List[str]

      :raises KeyError: If no architecture configs exist.

      .. rubric:: Examples

      >>> architecture_names = store.retrieve_architecture_config_names()



   .. py:method:: delete_architecture_config(architecture_name: str) -> None

      Delete a architecture config from the store.

      :param architecture_name: The name of the architecture config to
                                delete.
      :type architecture_name: str

      :raises KeyError: If the architecture config does not exist.

      .. rubric:: Examples

      >>> store.delete_architecture_config("architecture1")



   .. py:method:: store_trainer_config(trainer_config: dacapo.experiments.trainers.trainer_config.TrainerConfig) -> None
      :abstractmethod:


      Store a trainer config.

      :param trainer_config: The trainer config to store.
      :type trainer_config: TrainerConfig

      :raises DuplicateNameError: If a trainer config with the same name already
          exists.

      .. rubric:: Examples

      >>> store.store_trainer_config(trainer_config)



   .. py:method:: retrieve_trainer_config(trainer_name: str) -> None
      :abstractmethod:


      Retrieve a trainer config from a trainer name.

      :param trainer_name: The name of the trainer config to retrieve.
      :type trainer_name: str

      :returns: The trainer config with the given name.
      :rtype: TrainerConfig

      :raises KeyError: If the trainer config does not exist.

      .. rubric:: Examples

      >>> trainer_config = store.retrieve_trainer_config("trainer1")



   .. py:method:: retrieve_trainer_config_names() -> List[str]
      :abstractmethod:


      Retrieve all trainer config names.

      :param List[str]: The names of all trainer configs.

      :returns: The names of all trainer configs.
      :rtype: List[str]

      :raises KeyError: If no trainer configs exist.

      .. rubric:: Examples

      >>> trainer_names = store.retrieve_trainer_config_names()



   .. py:method:: delete_trainer_config(trainer_name: str) -> None

      Delete a trainer config from the store.

      :param trainer_name: The name of the trainer config to delete.
      :type trainer_name: str

      :raises KeyError: If the trainer config does not exist.

      .. rubric:: Examples

      >>> store.delete_trainer_config("trainer1")



   .. py:method:: store_datasplit_config(datasplit_config: dacapo.experiments.datasplits.datasplit_config.DataSplitConfig) -> None
      :abstractmethod:


      Store a datasplit config.

      :param datasplit_config: The datasplit config to store.
      :type datasplit_config: DataSplitConfig

      :raises DuplicateNameError: If a datasplit config with the same name already
          exists.

      .. rubric:: Examples

      >>> store.store_datasplit_config(datasplit_config)



   .. py:method:: retrieve_datasplit_config(datasplit_name: str) -> dacapo.experiments.datasplits.datasplit_config.DataSplitConfig
      :abstractmethod:


      Retrieve a datasplit config from a datasplit name.

      :param datasplit_name: The name of the datasplit config to retrieve.
      :type datasplit_name: str

      :returns: The datasplit config with the given name.
      :rtype: DataSplitConfig

      :raises KeyError: If the datasplit config does not exist.

      .. rubric:: Examples

      >>> datasplit_config = store.retrieve_datasplit_config("datasplit1")



   .. py:method:: retrieve_datasplit_config_names() -> List[str]
      :abstractmethod:


      Retrieve all datasplit names.

      :param List[str]: The names of all datasplit configs.

      :returns: The names of all datasplit configs.
      :rtype: List[str]

      :raises KeyError: If no datasplit configs exist.

      .. rubric:: Examples

      >>> datasplit_names = store.retrieve_datasplit_config_names()



   .. py:method:: delete_datasplit_config(datasplit_name: str) -> None


   .. py:method:: store_array_config(array_config: dacapo.experiments.datasplits.datasets.arrays.array_config.ArrayConfig) -> None
      :abstractmethod:


      Store a array config.

      :param array_config: The array config to store.
      :type array_config: ArrayConfig

      :raises DuplicateNameError: If a array config with the same name already
          exists.

      .. rubric:: Examples

      >>> store.store_array_config(array_config)



   .. py:method:: retrieve_array_config(array_name: str) -> dacapo.experiments.datasplits.datasets.arrays.array_config.ArrayConfig
      :abstractmethod:


      Retrieve a array config from a array name.

      :param array_name: The name of the array config to retrieve.
      :type array_name: str

      :returns: The array config with the given name.
      :rtype: ArrayConfig

      :raises KeyError: If the array config does not exist.

      .. rubric:: Examples

      >>> array_config = store.retrieve_array_config("array1")



   .. py:method:: retrieve_array_config_names() -> List[str]
      :abstractmethod:


      Retrieve all array names.

      :param List[str]: The names of all array configs.

      :returns: The names of all array configs.
      :rtype: List[str]

      :raises KeyError: If no array configs exist.

      .. rubric:: Examples

      >>> array_names = store.retrieve_array_config_names()



   .. py:method:: delete_array_config(array_name: str) -> None

      Delete a array config from the store.

      :param array_name: The name of the array config to delete.
      :type array_name: str

      :raises KeyError: If the array config does not exist.

      .. rubric:: Examples

      >>> store.delete_array_config("array1")



.. py:exception:: DuplicateNameError



   Exception raised when trying to store a config with a name that already
   exists.

   .. attribute:: message

      The error message.

      :type: str

   .. method:: __str__

      Return the error message.
      
      


.. py:data:: converter

.. py:class:: RunConfig

   A class to represent a configuration of a run that helps to structure all the tasks,
   architecture, training, and datasplit configurations.

   ...

   Attributes:
   -----------
   task_config: `TaskConfig`
       A config defining the Task to run that includes deciding the output of the model and
       different methods to achieve the goal.

   architecture_config: `ArchitectureConfig`
        A config that defines the backbone architecture of the model. It impacts the model's
        performance significantly.

   trainer_config: `TrainerConfig`
       Defines how batches are generated and passed for training the model along with defining
       configurations like batch size, learning rate, number of cpu workers and snapshot logging.

   datasplit_config: `DataSplitConfig`
       Configures the data available for the model during training or validation phases.

   name: str
       A unique name for this run to distinguish it.

   repetition: int
       The repetition number of this run.

   num_iterations: int
       The total number of iterations to train for during this run.

   validation_interval: int
       Specifies how often to perform validation during the run. It defaults to 1000.

   start_config : `Optional[StartConfig]`
       A starting point for continued training. It is optional and can be left out.


   .. py:attribute:: task_config
      :type:  dacapo.experiments.tasks.TaskConfig


   .. py:attribute:: architecture_config
      :type:  dacapo.experiments.architectures.ArchitectureConfig


   .. py:attribute:: trainer_config
      :type:  dacapo.experiments.trainers.TrainerConfig


   .. py:attribute:: datasplit_config
      :type:  dacapo.experiments.datasplits.DataSplitConfig


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: repetition
      :type:  int


   .. py:attribute:: num_iterations
      :type:  int


   .. py:attribute:: validation_interval
      :type:  int


   .. py:attribute:: start_config
      :type:  Optional[dacapo.experiments.starts.StartConfig]


.. py:class:: ArchitectureConfig

   A class to represent the base configurations of any architecture. It is used to define the architecture of a neural network model.

   .. attribute:: name

      str
      a unique name for the architecture.

   .. method:: verify()

      
      validates the given architecture.

   .. note:: The class is abstract and requires to implement the abstract methods.


   .. py:attribute:: name
      :type:  str


   .. py:method:: verify() -> Tuple[bool, str]

      A method to validate an architecture configuration.

      :returns: A tuple of a boolean indicating if the architecture is valid and a message.
      :rtype: Tuple[bool, str]

      :raises NotImplementedError: If the method is not implemented in the derived class.

      .. rubric:: Examples

      >>> config = ArchitectureConfig("MyModel")
      >>> is_valid, message = config.verify()
      >>> print(is_valid, message)

      .. note:: The method should be implemented in the derived class.



.. py:class:: DataSplitConfig

   A class used to create a DataSplit configuration object.

   .. attribute:: name

      str
      A name for the datasplit. This name will be saved so it can be found
      and reused easily. It is recommended to keep it short and avoid special
      characters.

   .. method:: verify() -> Tuple[bool, str]

      
      Validates if it is a valid data split configuration.

   .. rubric:: Notes

   This class is used to create a DataSplit configuration object.


   .. py:attribute:: name
      :type:  str


   .. py:method:: verify() -> Tuple[bool, str]

      Validates if the current configuration is a valid data split configuration.

      :returns:

                Tuple[bool, str]
                    True if the configuration is valid,
                    False otherwise along with respective validation error message.

      :raises NotImplementedError: If the method is not implemented in the derived class.

      .. rubric:: Examples

      >>> datasplit_config = DataSplitConfig(name="datasplit")
      >>> datasplit_config.verify()
      (True, "No validation for this DataSplit")

      .. rubric:: Notes

      This method is used to validate the configuration of DataSplit.



.. py:class:: DatasetConfig

   A class used to define configuration for datasets. This provides the
   framework to create a Dataset instance.

   .. attribute:: name

      str (eg: "sample_dataset").
      A unique identifier to name the dataset.
      It aids in easy identification and reusability of this dataset.
      Advised to keep it short and refrain from using special characters.

   .. attribute:: weight

      int (default=1).
      A numeric value that indicates how frequently this dataset should be
      sampled in comparison to others. Higher the weight, more frequently it
      gets sampled.

   .. method:: verify

      
      Checks and validates the dataset configuration. The specific rules for
      validation need to be defined by the user.

   .. rubric:: Notes

   This class is used to create a configuration object for datasets.


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: weight
      :type:  int


   .. py:method:: verify() -> Tuple[bool, str]

      Method to verify the dataset configuration.

      Since there is no specific validation logic defined for this DataSet, this
      method will always return True as default reaction and a message stating
      the lack of validation.

      :returns: A tuple of boolean value indicating the check (True or False) and
                message specifying result of validation.
      :rtype: tuple

      :raises NotImplementedError: If the method is not implemented in the derived class.

      .. rubric:: Examples

      >>> dataset_config = DatasetConfig(name="sample_dataset")
      >>> dataset_config.verify()
      (True, "No validation for this DataSet")

      .. rubric:: Notes

      This method is used to validate the configuration of the dataset.



.. py:class:: ArrayConfig

   Base class for array configurations. Each subclass of an
   `Array` should have a corresponding config class derived from
   `ArrayConfig`. This class should be used to store the configuration
   of the array.

   .. attribute:: name

      A unique name for this array. This will be saved so you
      and others can find and reuse this array. Keep it short
      and avoid special characters.

      :type: str

   .. method:: verify(self) -> Tuple[bool, str]

      This method is used to check whether this is a valid Array.

   .. note::

      This class is used to create a base class for array configurations. Each subclass of an
      `Array` should have a corresponding config class derived from `ArrayConfig`.
      This class should be used to store the configuration of the array.


   .. py:attribute:: name
      :type:  str


   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Array

      :returns: A tuple with the first element being a boolean
                indicating whether the array is valid and the second element being
                a string with a message explaining why the array is invalid
      :rtype: Tuple[bool, str]

      :raises NotImplementedError: This method is not implemented in this class

      .. rubric:: Examples

      >>> array_config = ArrayConfig(name="array_config")
      >>> array_config.verify()
      (True, "No validation for this Array")

      .. note:: This method is used to check whether this is a valid Array.



.. py:class:: TaskConfig

   Base class for task configurations. Each subclass of a `Task` should
   have a corresponding config class derived from `TaskConfig`.

   .. attribute:: name

      A unique name for this task. This will be saved so you and
      others can find and reuse this task. Keep it short and avoid
      special characters.

   .. method:: verify(self) -> Tuple[bool, str]

      This method verifies the TaskConfig object.

   .. rubric:: Notes

   This is a base class for all task configurations. It is not meant to be
   used directly.


   .. py:attribute:: name
      :type:  str


   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Task

      :returns:

                A tuple containing a boolean value indicating whether the TaskConfig object is valid
                    and a string containing the reason why the object is invalid.
      :rtype: Tuple[bool, str]

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> valid, reason = task_config.verify()



.. py:class:: TrainerConfig

   A class to represent the Trainer Configurations.

   It is the base class for trainer configurations. Each subclass of a `Trainer`
   should have a specific config class derived from `TrainerConfig`.

   .. attribute:: name

      A unique name for this trainer.

      :type: str

   .. attribute:: batch_size

      The batch size to be used during training.

      :type: int

   .. attribute:: learning_rate

      The learning rate of the optimizer.

      :type: float

   .. method:: verify() -> Tuple[bool, str]

      
      Verify whether this TrainerConfig is valid or not.

   .. note:: The TrainerConfig class is an abstract class that cannot be instantiated directly. It is meant to be subclassed.


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: batch_size
      :type:  int


   .. py:attribute:: learning_rate
      :type:  float


   .. py:method:: verify() -> Tuple[bool, str]

      Verify whether this TrainerConfig is valid or not.
      A TrainerConfig is considered valid if it has a valid batch size and learning rate.

      :returns: A tuple containing a boolean indicating whether the
                TrainerConfig is valid and a message explaining why.
      :rtype: tuple

      :raises NotImplementedError: If the method is not implemented by the subclass.

      .. rubric:: Examples

      >>> valid, message = trainer_config.verify()
      >>> valid
      True
      >>> message
      "No validation for this Trainer"

      .. note:: This method must be implemented by the subclass.



.. py:data:: logger

.. py:class:: MongoConfigStore(db_host, db_name)



   A MongoDB store for configurations. Used to store and retrieve
   configurations for runs, tasks, architectures, trainers, and datasets.

   .. attribute:: db_host

      The host of the MongoDB database.

      :type: str

   .. attribute:: db_name

      The name of the MongoDB database.

      :type: str

   .. attribute:: client

      The MongoDB client.

      :type: MongoClient

   .. attribute:: database

      The MongoDB database.

      :type: Database

   .. attribute:: users

      The users collection.

      :type: Collection

   .. attribute:: runs

      The runs collection.

      :type: Collection

   .. attribute:: tasks

      The tasks collection.

      :type: Collection

   .. attribute:: datasplits

      The datasplits collection.

      :type: Collection

   .. attribute:: datasets

      The datasets collection.

      :type: Collection

   .. attribute:: arrays

      The arrays collection.

      :type: Collection

   .. attribute:: architectures

      The architectures collection.

      :type: Collection

   .. attribute:: trainers

      The trainers collection.

      :type: Collection

   .. method:: store_run_config(run_config, ignore)

      Store the run configuration.

   .. method:: retrieve_run_config(run_name)

      Retrieve the run configuration.

   .. method:: delete_run_config(run_name)

      Delete the run configuration.

   .. method:: retrieve_run_config_names(task_names, datasplit_names, architecture_names, trainer_names)

      Retrieve the names of the run configurations.

   .. method:: store_task_config(task_config, ignore)

      Store the task configuration.

   .. method:: retrieve_task_config(task_name)

      Retrieve the task configuration.

   .. method:: retrieve_task_config_names()

      Retrieve the names of the task configurations.

   .. method:: store_architecture_config(architecture_config, ignore)

      Store the architecture configuration.

   .. method:: retrieve_architecture_config(architecture_name)

      Retrieve the architecture configuration.

   .. method:: retrieve_architecture_config_names()

      Retrieve the names of the architecture configurations.

   .. method:: store_trainer_config(trainer_config, ignore)

      Store the trainer configuration.

   .. method:: retrieve_trainer_config(trainer_name)

      Retrieve the trainer configuration.

   .. method:: retrieve_trainer_config_names()

      Retrieve the names of the trainer configurations.

   .. method:: store_datasplit_config(datasplit_config, ignore)

      Store the datasplit configuration.

   .. method:: retrieve_datasplit_config(datasplit_name)

      Retrieve the datasplit configuration.

   .. method:: retrieve_datasplit_config_names()

      Retrieve the names of the datasplit configurations.

   .. method:: store_dataset_config(dataset_config, ignore)

      Store the dataset configuration.

   .. method:: retrieve_dataset_config(dataset_name)

      Retrieve the dataset configuration.

   .. method:: retrieve_dataset_config_names()

      Retrieve the names of the dataset configurations.

   .. method:: store_array_config(array_config, ignore)

      Store the array configuration.

   .. method:: retrieve_array_config(array_name)

      Retrieve the array configuration.

   .. method:: retrieve_array_config_names()

      Retrieve the names of the array configurations.

   .. method:: __save_insert(collection, data, ignore)

      Save or insert a document into a collection.

   .. method:: __same_doc(a, b, ignore)

      Check if two documents are the same.

   .. method:: __init_db()

      Initialize the database.

   .. method:: __open_collections()

      Open the collections.

   .. rubric:: Notes

   The store is initialized with the host and database name.


   .. py:method:: delete_config(database, config_name: str) -> None

      Deletes a configuration from the database.

      :param database: The database object.
      :param config_name: The name of the configuration to delete.

      :raises ValueError: If the configuration is not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> config_name = 'config_0'
      >>> store.delete_config(store.tasks, config_name)



   .. py:method:: store_run_config(run_config, ignore=None)

      Stores the run configuration in the MongoDB runs collection.

      :param run_config: The run configuration to be stored.
      :type run_config: dict
      :param ignore: A list of fields to ignore during the storage process.
      :type ignore: list, optional

      :raises DuplicateNameError: If the run configuration is already stored.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> run_config = {'name': 'run_0'}
      >>> store.store_run_config(run_config)



   .. py:method:: retrieve_run_config(run_name)

      Retrieve the run configuration for a given run name.

      :param run_name: The name of the run.
      :type run_name: str

      :returns: The run configuration for the given run name.
      :rtype: RunConfig

      :raises ValueError: If the run configuration is not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> run_name = 'run_0'
      >>> store.retrieve_run_config(run_name)



   .. py:method:: delete_run_config(run_name)

      Delete a run configuration from the MongoDB collection.

      :param run_name: The name of the run configuration to delete.
      :type run_name: str

      :raises ValueError: If the run configuration is not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> run_name = 'run_0'
      >>> store.delete_run_config(run_name)



   .. py:method:: retrieve_run_config_names(task_names=None, datasplit_names=None, architecture_names=None, trainer_names=None)

      Retrieve the names of run configurations based on specified filters.

      :param task_names: List of task names to filter the run configurations. Defaults to None.
      :type task_names: list, optional
      :param datasplit_names: List of datasplit names to filter the run configurations. Defaults to None.
      :type datasplit_names: list, optional
      :param architecture_names: List of architecture names to filter the run configurations. Defaults to None.
      :type architecture_names: list, optional
      :param trainer_names: List of trainer names to filter the run configurations. Defaults to None.
      :type trainer_names: list, optional

      :returns: A list of run configuration names that match the specified filters.
      :rtype: list

      :raises ValueError: If the run configurations are not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> task_names = ['task_0']
      >>> datasplit_names = ['datasplit_0']
      >>> architecture_names = ['architecture_0']
      >>> trainer_names = ['trainer_0']
      >>> store.retrieve_run_config_names(task_names, datasplit_names, architecture_names, trainer_names)



   .. py:method:: store_task_config(task_config, ignore=None)

      Store the task configuration in the MongoDB tasks collection.

      :param task_config: The task configuration to be stored.
      :type task_config: TaskConfig
      :param ignore: A list of fields to ignore during the storage process.
      :type ignore: list, optional

      :raises DuplicateNameError: If the task configuration is already stored.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> task_config = TaskConfig(name='task_0')
      >>> store.store_task_config(task_config)



   .. py:method:: retrieve_task_config(task_name)

      Retrieve the task configuration for a given task name.

      :param task_name: The name of the task.
      :type task_name: str

      :returns: The task configuration object.
      :rtype: TaskConfig

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> task_name = 'task_0'
      >>> store.retrieve_task_config(task_name)



   .. py:method:: retrieve_task_config_names()

      Retrieve the names of all task configurations.

      :returns: A list of task configuration names.

      :raises ValueError: If the task configurations are not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> store.retrieve_task_config_names()



   .. py:method:: store_architecture_config(architecture_config, ignore=None)

      Store the architecture configuration in the MongoDB.

      :param architecture_config: The architecture configuration to be stored.
      :type architecture_config: ArchitectureConfig
      :param ignore: List of fields to ignore during storage. Defaults to None.
      :type ignore: list, optional

      :raises DuplicateNameError: If the architecture configuration is already stored.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> architecture_config = ArchitectureConfig(name='architecture_0')
      >>> store.store_architecture_config(architecture_config)



   .. py:method:: retrieve_architecture_config(architecture_name)

      Retrieve the architecture configuration for the given architecture name.

      :param architecture_name: The name of the architecture.
      :type architecture_name: str

      :returns: The architecture configuration object.
      :rtype: ArchitectureConfig

      :raises ValueError: If the architecture configuration is not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> architecture_name = 'architecture_0'
      >>> store.retrieve_architecture_config(architecture_name)



   .. py:method:: retrieve_architecture_config_names()

      Retrieve the names of all architecture configurations.

      :returns: A list of architecture configuration names.

      :raises ValueError: If the architecture configurations are not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> store.retrieve_architecture_config_names()



   .. py:method:: store_trainer_config(trainer_config, ignore=None)

      Store the trainer configuration in the MongoDB.

      :param trainer_config: The trainer configuration to be stored.
      :type trainer_config: TrainerConfig
      :param ignore: List of fields to ignore during storage. Defaults to None.
      :type ignore: list, optional

      :returns: If the trainer configuration is already stored.
      :rtype: DuplicateNameError

      :raises DuplicateNameError: If the trainer configuration is already stored.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> trainer_config = TrainerConfig(name='trainer_0')
      >>> store.store_trainer_config(trainer_config)



   .. py:method:: retrieve_trainer_config(trainer_name)

      Retrieve the trainer configuration for the given trainer name.

      :param trainer_name: The name of the trainer.
      :type trainer_name: str

      :returns: The trainer configuration object.
      :rtype: TrainerConfig

      :raises ValueError: If the trainer configuration is not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> trainer_name = 'trainer_0'
      >>> store.retrieve_trainer_config(trainer_name)



   .. py:method:: retrieve_trainer_config_names()

      Retrieve the names of all trainer configurations.

      :param trainer_name: The name of the trainer.
      :type trainer_name: str

      :returns: The trainer configuration object.
      :rtype: TrainerConfig

      :raises ValueError: If the trainer configuration is not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> trainer_name = 'trainer_0'
      >>> store.retrieve_trainer_config(trainer_name)



   .. py:method:: store_datasplit_config(datasplit_config, ignore=None)

      Store the datasplit configuration in the MongoDB.

      :param datasplit_config: The datasplit configuration to be stored.
      :type datasplit_config: DataSplitConfig
      :param ignore: List of fields to ignore during storage. Defaults to None.
      :type ignore: list, optional

      :returns: If the datasplit configuration is already stored.
      :rtype: DuplicateNameError

      :raises DuplicateNameError: If the datasplit configuration is already stored.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> datasplit_config = DataSplitConfig(name='datasplit_0')
      >>> store.store_datasplit_config(datasplit_config)



   .. py:method:: retrieve_datasplit_config(datasplit_name)

      Retrieve the datasplit configuration for the given datasplit name.

      :param datasplit_name: The name of the datasplit.
      :type datasplit_name: str

      :returns: The datasplit configuration object.
      :rtype: DataSplitConfig

      :raises ValueError: If the datasplit configuration is not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> datasplit_name = 'datasplit_0'
      >>> store.retrieve_datasplit_config(datasplit_name)



   .. py:method:: retrieve_datasplit_config_names()

      Retrieve the names of all datasplit configurations.

      :returns: A list of datasplit configuration names.

      :raises ValueError: If the datasplit configurations are not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> store.retrieve_datasplit_config_names()



   .. py:method:: store_dataset_config(dataset_config, ignore=None)

      Store the dataset configuration in the MongoDB.

      :param dataset_config: The dataset configuration to be stored.
      :type dataset_config: DatasetConfig
      :param ignore: List of fields to ignore during storage. Defaults to None.
      :type ignore: list, optional

      :returns: If the dataset configuration is already stored.
      :rtype: DuplicateNameError

      :raises DuplicateNameError: If the dataset configuration is already stored.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> dataset_config = DatasetConfig(name='dataset_0')
      >>> store.store_dataset_config(dataset_config)



   .. py:method:: retrieve_dataset_config(dataset_name)

      Retrieve the dataset configuration for the given dataset name.

      :param dataset_name: The name of the dataset.
      :type dataset_name: str

      :returns: The dataset configuration object.
      :rtype: DatasetConfig

      :raises ValueError: If the dataset configuration is not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> dataset_name = 'dataset_0'
      >>> store.retrieve_dataset_config(dataset_name)



   .. py:method:: retrieve_dataset_config_names()

      Retrieve the names of all dataset configurations.

      :returns: A list of dataset configuration names.

      :raises ValueError: If the dataset configurations are not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> store.retrieve_dataset_config_names()



   .. py:method:: store_array_config(array_config, ignore=None)

      Store the array configuration in the MongoDB.

      :param array_config: The array configuration to be stored.
      :type array_config: ArrayConfig
      :param ignore: List of fields to ignore during storage. Defaults to None.
      :type ignore: list, optional

      :returns: If the array configuration is already stored.
      :rtype: DuplicateNameError

      :raises DuplicateNameError: If the array configuration is already stored.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> array_config = ArrayConfig(name='array_0')
      >>> store.store_array_config(array_config)



   .. py:method:: retrieve_array_config(array_name)

      Retrieve the array configuration for the given array name.

      :param array_name: The name of the array.
      :type array_name: str

      :returns: The array configuration object.
      :rtype: ArrayConfig

      :raises ValueError: If the array configuration is not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> array_name = 'array_0'
      >>> store.retrieve_array_config(array_name)



   .. py:method:: retrieve_array_config_names()

      Retrieve the names of all array configurations.

      :returns: A list of array configuration names.

      :raises ValueError: If the array configurations are not available.

      .. rubric:: Examples

      >>> store = MongoConfigStore('localhost', 'dacapo')
      >>> store.retrieve_array_config_names()



