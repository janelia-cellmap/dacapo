dacapo.experiments.tasks.affinities_task
========================================

.. py:module:: dacapo.experiments.tasks.affinities_task


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.affinities_task.InstanceEvaluator
   dacapo.experiments.tasks.affinities_task.AffinitiesLoss
   dacapo.experiments.tasks.affinities_task.WatershedPostProcessor
   dacapo.experiments.tasks.affinities_task.AffinitiesPredictor
   dacapo.experiments.tasks.affinities_task.Task
   dacapo.experiments.tasks.affinities_task.AffinitiesTask


Module Contents
---------------

.. py:class:: InstanceEvaluator



   A class representing an evaluator for instance segmentation tasks.

   .. attribute:: criteria

      List[str]
      the evaluation criteria

   .. method:: evaluate(output_array_identifier, evaluation_array)

      
      Evaluate the output array against the evaluation array.

   .. method:: score

      
      Return the evaluation scores.

   .. note:: The InstanceEvaluator class is used to evaluate the performance of an instance segmentation task.


   .. py:attribute:: criteria
      :type:  List[str]
      :value: ['voi_merge', 'voi_split', 'voi']



   .. py:method:: evaluate(output_array_identifier, evaluation_array)

      Evaluate the output array against the evaluation array.

      :param output_array_identifier: str
                                      the identifier of the output array
      :param evaluation_array: ZarrArray
                               the evaluation array

      :returns:

                InstanceEvaluationScores
                    the evaluation scores

      :raises ValueError: if the output array identifier is not valid

      .. rubric:: Examples

      >>> instance_evaluator = InstanceEvaluator()
      >>> output_array_identifier = "output_array"
      >>> evaluation_array = ZarrArray.open_from_array_identifier("evaluation_array")
      >>> instance_evaluator.evaluate(output_array_identifier, evaluation_array)
      InstanceEvaluationScores(voi_merge=0.0, voi_split=0.0)

      .. note:: This function is used to evaluate the output array against the evaluation array.



   .. py:property:: score
      :type: dacapo.experiments.tasks.evaluators.instance_evaluation_scores.InstanceEvaluationScores

      Return the evaluation scores.

      :returns:

                InstanceEvaluationScores
                    the evaluation scores

      :raises NotImplementedError: if the function is not implemented

      .. rubric:: Examples

      >>> instance_evaluator = InstanceEvaluator()
      >>> instance_evaluator.score
      InstanceEvaluationScores(voi_merge=0.0, voi_split=0.0)

      .. note:: This function is used to return the evaluation scores.


.. py:class:: AffinitiesLoss(num_affinities: int, lsds_to_affs_weight_ratio: float)



   A class representing a loss function that calculates the loss between affinities and local shape descriptors (LSDs).

   .. attribute:: num_affinities

      int
      the number of affinities

   .. attribute:: lsds_to_affs_weight_ratio

      float
      the ratio of the weight of the loss between affinities and LSDs

   .. method:: compute(prediction, target, weight=None)

      
      Calculate the total loss between prediction and target.

   .. note:: The AffinitiesLoss class is used to calculate the loss between affinities and local shape descriptors (LSDs).


   .. py:method:: compute(prediction, target, weight)

      Method to calculate the total loss between affinities and LSDs.

      :param prediction: torch.Tensor
                         the model's prediction
      :param target: torch.Tensor
                     the target values
      :param weight: torch.Tensor
                     the weight to apply to the loss

      :returns:

                torch.Tensor
                    the total loss between affinities and LSDs

      :raises ValueError: if the number of affinities in the prediction and target does not match

      .. rubric:: Examples

      >>> affinities_loss = AffinitiesLoss(3, 0.5)
      >>> prediction = torch.tensor([[1, 2, 3, 4], [5, 6, 7, 8]])
      >>> target = torch.tensor([[9, 10, 11, 12], [13, 14, 15, 16]])
      >>> weight = torch.tensor([[1, 1, 1, 1], [1, 1, 1, 1]])
      >>> affinities_loss.compute(prediction, target, weight)
      tensor(0.5)

      .. note:: The AffinitiesLoss class is used to calculate the loss between affinities and local shape descriptors (LSDs).



.. py:class:: WatershedPostProcessor(offsets: List[funlib.geometry.Coordinate])



   A post-processor that applies a watershed transformation to the
   prediction.

   .. attribute:: offsets

      List of offsets for the watershed transformation.

   .. method:: enumerate_parameters

      Enumerate all possible parameters of this post-processor.

   .. method:: set_prediction

      Set the prediction array.

   .. method:: process

      Process the prediction with the given parameters.

   .. note:: This post-processor uses the `watershed_function.py` script to apply the watershed transformation. The offsets are used to define the neighborhood for the watershed transformation.


   .. py:method:: enumerate_parameters()

      Enumerate all possible parameters of this post-processor. Should
      return instances of ``PostProcessorParameters``.

      :returns: A generator of parameters.
      :rtype: Generator[WatershedPostProcessorParameters]

      :raises NotImplementedError: If the method is not implemented.

      .. rubric:: Examples

      >>> for parameters in post_processor.enumerate_parameters():
      ...     print(parameters)

      .. note:: This method should be implemented by the subclass. It should return a generator of instances of ``WatershedPostProcessorParameters``.



   .. py:method:: set_prediction(prediction_array_identifier)

      Set the prediction array identifier.

      :param prediction_array_identifier: The identifier of the array containing
                                          the model's prediction.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = MyPostProcessor()
      >>> post_processor.set_prediction("prediction")

      .. note::

         This method must be implemented in the subclass. It should set the
         `prediction_array_identifier` attribute.



   .. py:method:: process(parameters: dacapo.experiments.tasks.post_processors.watershed_post_processor_parameters.WatershedPostProcessorParameters, output_array_identifier: dacapo.store.array_store.LocalArrayIdentifier, num_workers: int = 16, block_size: funlib.geometry.Coordinate = Coordinate((256, 256, 256)))

      Process the prediction with the given parameters.

      :param parameters: The parameters to use for processing.
      :type parameters: WatershedPostProcessorParameters
      :param output_array_identifier: The output array identifier.
      :type output_array_identifier: LocalArrayIdentifier
      :param num_workers: The number of workers to use for processing.
      :type num_workers: int
      :param block_size: The block size to use for processing.
      :type block_size: Coordinate

      :returns: The output array identifier.
      :rtype: LocalArrayIdentifier

      :raises NotImplementedError: If the method is not implemented.

      .. rubric:: Examples

      >>> post_processor.process(parameters, output_array_identifier)

      .. note:: This method should be implemented by the subclass. To run the watershed transformation, the method uses the `segment_blockwise` function from the `dacapo.blockwise.scheduler` module.



.. py:class:: AffinitiesPredictor(neighborhood: List[funlib.geometry.Coordinate], lsds: bool = True, num_voxels: int = 20, downsample_lsds: int = 1, grow_boundary_iterations: int = 0, affs_weight_clipmin: float = 0.05, affs_weight_clipmax: float = 0.95, lsd_weight_clipmin: float = 0.05, lsd_weight_clipmax: float = 0.95, background_as_object: bool = False)



   A predictor for generating affinity predictions from input data.

   .. attribute:: neighborhood

      The neighborhood.

      :type: List[Coordinate]

   .. attribute:: lsds

      Whether to compute local shape descriptors.

      :type: bool

   .. attribute:: num_voxels

      The number of voxels.

      :type: int

   .. attribute:: downsample_lsds

      The downsample rate for LSDs.

      :type: int

   .. attribute:: grow_boundary_iterations

      The number of iterations to grow the boundary.

      :type: int

   .. attribute:: affs_weight_clipmin

      The minimum weight for affinities.

      :type: float

   .. attribute:: affs_weight_clipmax

      The maximum weight for affinities.

      :type: float

   .. attribute:: lsd_weight_clipmin

      The minimum weight for LSDs.

      :type: float

   .. attribute:: lsd_weight_clipmax

      The maximum weight for LSDs.

      :type: float

   .. attribute:: background_as_object

      Whether to treat the background as an object.

      :type: bool

   .. method:: __init__(

      
      self,
      neighborhood: List[Coordinate],
      lsds: bool = True,
      num_voxels: int = 20,
      downsample_lsds: int = 1,
      grow_boundary_iterations: int = 0,
      affs_weight_clipmin: float = 0.05,
      affs_weight_clipmax: float = 0.95,
      lsd_weight_clipmin: float = 0.05,
      lsd_weight_clipmax: float = 0.95,
      background_as_object: bool = False

   .. method:: )

      Initializes the AffinitiesPredictor.

   .. method:: extractor(self, voxel_size)

      Get the LSD extractor.

   .. method:: dims

      Get the number of dimensions.

   .. method:: sigma(self, voxel_size)

      Compute the sigma value for LSD computation.

   .. method:: lsd_pad(self, voxel_size)

      Compute the padding for LSD computation.

   .. method:: num_channels

      Get the number of channels.

   .. method:: create_model(self, architecture)

      Create the model.

   .. method:: create_target(self, gt)

      Create the target data.

   .. method:: _grow_boundaries(self, mask, slab)

      Grow the boundaries of the mask.

   .. method:: create_weight(self, gt, target, mask, moving_class_counts=None)

      Create the weight data.

   .. method:: gt_region_for_roi(self, target_spec)

      Get the ground truth region for the target region of interest (ROI).

   .. method:: output_array_type

      Get the output array type.

   .. rubric:: Notes

   This is a subclass of Predictor.


   .. py:method:: extractor(voxel_size)

      Get the LSD extractor.

      :param voxel_size: The voxel size.
      :type voxel_size: Coordinate

      :returns: The LSD extractor.
      :rtype: LsdExtractor

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> extractor = predictor.extractor(voxel_size)



   .. py:property:: dims
      Get the number of dimensions.

      :returns: The number of dimensions.
      :rtype: int

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.dims


   .. py:method:: sigma(voxel_size)

      Compute the sigma value for LSD computation.

      :param voxel_size: The voxel size.
      :type voxel_size: Coordinate

      :returns: The sigma value.
      :rtype: Coordinate

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.sigma(voxel_size)



   .. py:method:: lsd_pad(voxel_size)

      Compute the padding for LSD computation.

      :param voxel_size: The voxel size.
      :type voxel_size: Coordinate

      :returns: The padding value.
      :rtype: Coordinate

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.lsd_pad(voxel_size)



   .. py:property:: num_channels
      Get the number of channels.

      :returns: The number of channels.
      :rtype: int

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.num_channels


   .. py:method:: create_model(architecture)

      Create the model.

      :param architecture: The architecture for the model.

      :returns: The created model.
      :rtype: Model

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> model = predictor.create_model(architecture)



   .. py:method:: create_target(gt)

      Create the target data.

      :param gt: The ground truth data.

      :returns: The created target data.
      :rtype: NumpyArray

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.create_target(gt)



   .. py:method:: create_weight(gt, target, mask, moving_class_counts=None)

      Create the weight data.

      :param gt: The ground truth data.
      :param target: The target data.
      :param mask: The mask data.
      :param moving_class_counts: The moving class counts.

      :returns: The created weight data and moving class counts.
      :rtype: Tuple[NumpyArray, Tuple]

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.create_weight(gt, target, mask, moving_class_counts)



   .. py:method:: gt_region_for_roi(target_spec)

      Get the ground truth region for the target region of interest (ROI).

      :param target_spec: The target region of interest (ROI) specification.

      :returns: The ground truth region specification.

      :raises NotImplementedError: This method is not implemented.



   .. py:property:: output_array_type
      Get the output array type.

      :returns: The output array type.
      :rtype: EmbeddingArray

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.output_array_type


.. py:class:: Task



   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: predictor
      :type:  dacapo.experiments.tasks.predictors.Predictor


   .. py:attribute:: loss
      :type:  dacapo.experiments.tasks.losses.Loss


   .. py:attribute:: evaluator
      :type:  dacapo.experiments.tasks.evaluators.Evaluator


   .. py:attribute:: post_processor
      :type:  dacapo.experiments.tasks.post_processors.PostProcessor


   .. py:property:: parameters
      :type: Iterable[dacapo.experiments.tasks.post_processors.PostProcessorParameters]



   .. py:property:: evaluation_scores
      :type: dacapo.experiments.tasks.evaluators.EvaluationScores



   .. py:method:: create_model(architecture)


.. py:class:: AffinitiesTask(task_config)



   This is a task for generating voxel affinities. It uses an `AffinitiesPredictor` for prediction,
   an `AffinitiesLoss` for loss calculation, a `WatershedPostProcessor` for post-processing, and an
   `InstanceEvaluator` for evaluation.

   .. attribute:: predictor

      AffinitiesPredictor object

   .. attribute:: loss

      AffinitiesLoss object

   .. attribute:: post_processor

      WatershedPostProcessor object

   .. attribute:: evaluator

      InstanceEvaluator object

   .. method:: __init__(self, task_config)

      Initializes all components for the affinities task.

   .. rubric:: Notes

   This is a subclass of Task.


