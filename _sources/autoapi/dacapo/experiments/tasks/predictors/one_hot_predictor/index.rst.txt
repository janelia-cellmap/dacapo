dacapo.experiments.tasks.predictors.one_hot_predictor
=====================================================

.. py:module:: dacapo.experiments.tasks.predictors.one_hot_predictor


Attributes
----------

.. autoapisummary::

   dacapo.experiments.tasks.predictors.one_hot_predictor.logger


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.predictors.one_hot_predictor.OneHotPredictor


Module Contents
---------------

.. py:data:: logger

.. py:class:: OneHotPredictor(classes: List[str], kernel_size: int)



   A predictor that uses one-hot encoding for classification tasks.

   .. attribute:: classes

      The list of class labels.

      :type: List[str]

   .. method:: __init__(self, classes

      List[str]): Initializes the OneHotPredictor.

   .. method:: create_model(self, architecture)

      Create the model for the predictor.

   .. method:: create_target(self, gt)

      Create the target array for training.

   .. method:: create_weight(self, gt, target, mask, moving_class_counts=None)

      Create the weight array for training.

   .. method:: output_array_type

      Get the output array type.

   .. method:: process(self, labels

      np.ndarray): Process the labels array and convert it to one-hot encoding.

   .. rubric:: Notes

   This is a subclass of Predictor.


   .. py:attribute:: classes


   .. py:attribute:: kernel_size


   .. py:property:: embedding_dims

      Get the number of embedding dimensions.

      :returns: The number of embedding dimensions.
      :rtype: int

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> embedding_dims = predictor.embedding_dims


   .. py:method:: create_model(architecture)

      Create the model for the predictor.

      :param architecture: The architecture for the model.

      :returns: The created model.
      :rtype: Model

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> model = predictor.create_model(architecture)



   .. py:method:: create_target(gt: funlib.persistence.Array)

      Turn labels into a one hot encoding



   .. py:method:: create_weight(gt, target, mask, moving_class_counts=None)

      Create the weight array for training.

      :param gt: The ground truth array.
      :param target: The target array.
      :param mask: The mask array.
      :param moving_class_counts: The moving class counts.

      :returns: The created weight array and None.
      :rtype: Tuple[NumpyArray, None]

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.create_weight(gt, target, mask, moving_class_counts)



   .. py:property:: output_array_type

      Get the output array type.

      :returns: The output array type.
      :rtype: ProbabilityArray

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> output_array_type = predictor.output_array_type


   .. py:method:: process(labels: numpy.ndarray)

      Process the labels array and convert it to one-hot encoding.

      :param labels: The labels array.
      :type labels: np.ndarray

      :returns: The one-hot encoded array.
      :rtype: np.ndarray

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> one_hots = predictor.process(labels)

      .. rubric:: Notes

      Assumes labels has a singleton channel dim and channel dim is first.



