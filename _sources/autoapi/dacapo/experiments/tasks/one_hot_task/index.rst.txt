dacapo.experiments.tasks.one_hot_task
=====================================

.. py:module:: dacapo.experiments.tasks.one_hot_task


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.one_hot_task.DummyEvaluator
   dacapo.experiments.tasks.one_hot_task.DummyLoss
   dacapo.experiments.tasks.one_hot_task.ArgmaxPostProcessor
   dacapo.experiments.tasks.one_hot_task.OneHotPredictor
   dacapo.experiments.tasks.one_hot_task.Task
   dacapo.experiments.tasks.one_hot_task.OneHotTask


Module Contents
---------------

.. py:class:: DummyEvaluator



   A class representing a dummy evaluator. This evaluator is used for testing purposes.

   .. attribute:: criteria

      List[str]
      the evaluation criteria

   .. method:: evaluate(output_array_identifier, evaluation_dataset)

      
      Evaluate the output array against the evaluation dataset.

   .. method:: score

      
      Return the evaluation scores.

   .. note:: The DummyEvaluator class is used to evaluate the performance of a dummy task.


   .. py:attribute:: criteria
      :value: ['frizz_level', 'blipp_score']



   .. py:method:: evaluate(output_array_identifier, evaluation_dataset)

      Evaluate the given output array and dataset and returns the scores based on predefined criteria.

      :param output_array_identifier: The output array to be evaluated.
      :param evaluation_dataset: The dataset to be used for evaluation.

      :returns: An object of DummyEvaluationScores class, with the evaluation scores.
      :rtype: DummyEvaluationScore

      :raises ValueError: if the output array identifier is not valid

      .. rubric:: Examples

      >>> dummy_evaluator = DummyEvaluator()
      >>> output_array_identifier = "output_array"
      >>> evaluation_dataset = "evaluation_dataset"
      >>> dummy_evaluator.evaluate(output_array_identifier, evaluation_dataset)
      DummyEvaluationScores(frizz_level=0.0, blipp_score=0.0)

      .. note:: This function is used to evaluate the output array against the evaluation dataset.



   .. py:property:: score
      :type: dacapo.experiments.tasks.evaluators.dummy_evaluation_scores.DummyEvaluationScores

      Return the evaluation scores.

      :returns: An object of DummyEvaluationScores class, with the evaluation scores.
      :rtype: DummyEvaluationScores

      .. rubric:: Examples

      >>> dummy_evaluator = DummyEvaluator()
      >>> dummy_evaluator.score
      DummyEvaluationScores(frizz_level=0.0, blipp_score=0.0)

      .. note:: This function is used to return the evaluation scores.


.. py:class:: DummyLoss



   A class representing a dummy loss function that calculates the absolute difference between each prediction and target.

   Inherits the Loss class.

   .. attribute:: name

      str
      name of the loss function

   .. method:: compute(prediction, target, weight=None)

      
      Calculate the total loss between prediction and target.

   .. note::

      The dummy loss is used to test the training loop and the loss calculation. It is not a real loss function.
      It is used to test the training loop and the loss calculation.


   .. py:method:: compute(prediction, target, weight=None)

      Method to calculate the total dummy loss.

      :param prediction: torch.Tensor
                         the model's prediction
      :param target: torch.Tensor
                     the target values
      :param weight: torch.Tensor
                     the weight to apply to the loss

      :returns:

                torch.Tensor
                    the total loss between prediction and target

      .. rubric:: Examples

      >>> dummy_loss = DummyLoss()
      >>> prediction = torch.tensor([1, 2, 3])
      >>> target = torch.tensor([4, 5, 6])
      >>> dummy_loss.compute(prediction, target)
      tensor(9)

      .. note::

         The dummy loss is used to test the training loop and the loss calculation. It is not a real loss function.
         It is used to test the training loop and the loss calculation.



.. py:class:: ArgmaxPostProcessor



   Post-processor that takes the argmax of the input array along the channel
   axis. The output is a binary array where the value is 1 if the argmax is
   greater than the threshold, and 0 otherwise.

   .. attribute:: prediction_array

      The array containing the model's prediction.

   .. method:: enumerate_parameters

      Enumerate all possible parameters of this post-processor.

   .. method:: set_prediction

      Set the prediction array identifier.

   .. method:: process

      Convert predictions into the final output.

   .. note::

      This class is abstract. Subclasses must implement the abstract methods. Once
      created, the values of its attributes cannot be changed.


   .. py:method:: enumerate_parameters()

      Enumerate all possible parameters of this post-processor. Should
      return instances of ``PostProcessorParameters``.

      :returns: An iterable of `PostProcessorParameters` instances.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = ArgmaxPostProcessor()
      >>> for parameters in post_processor.enumerate_parameters():
      ...     print(parameters)
      ArgmaxPostProcessorParameters(id=0)

      .. note::

         This method must be implemented in the subclass. It should return an
         iterable of `PostProcessorParameters` instances.



   .. py:method:: set_prediction(prediction_array_identifier)

      Set the prediction array identifier.

      :param prediction_array_identifier: The identifier of the array containing
                                          the model's prediction.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = ArgmaxPostProcessor()
      >>> post_processor.set_prediction("prediction")

      .. note::

         This method must be implemented in the subclass. It should set the
         `prediction_array_identifier` attribute.



   .. py:method:: process(parameters, output_array_identifier: dacapo.store.array_store.LocalArrayIdentifier, num_workers: int = 16, block_size: daisy.Coordinate = Coordinate((256, 256, 256)))

      Convert predictions into the final output.

      :param parameters: The parameters of the post-processor.
      :param output_array_identifier: The identifier of the output array.
      :param num_workers: The number of workers to use.
      :param block_size: The size of the blocks to process.

      :returns: The output array.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = ArgmaxPostProcessor()
      >>> post_processor.set_prediction("prediction")
      >>> post_processor.process(parameters, "output")

      .. note::

         This method must be implemented in the subclass. It should process the
         predictions and return the output array.



.. py:class:: OneHotPredictor(classes: List[str])



   A predictor that uses one-hot encoding for classification tasks.

   .. attribute:: classes

      The list of class labels.

      :type: List[str]

   .. method:: __init__(self, classes

      List[str]): Initializes the OneHotPredictor.

   .. method:: create_model(self, architecture)

      Create the model for the predictor.

   .. method:: create_target(self, gt)

      Create the target array for training.

   .. method:: create_weight(self, gt, target, mask, moving_class_counts=None)

      Create the weight array for training.

   .. method:: output_array_type

      Get the output array type.

   .. method:: process(self, labels

      np.ndarray): Process the labels array and convert it to one-hot encoding.

   .. rubric:: Notes

   This is a subclass of Predictor.


   .. py:property:: embedding_dims
      Get the number of embedding dimensions.

      :returns: The number of embedding dimensions.
      :rtype: int

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> embedding_dims = predictor.embedding_dims


   .. py:method:: create_model(architecture)

      Create the model for the predictor.

      :param architecture: The architecture for the model.

      :returns: The created model.
      :rtype: Model

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> model = predictor.create_model(architecture)



   .. py:method:: create_target(gt)

      Create the target array for training.

      :param gt: The ground truth array.

      :returns: The created target array.
      :rtype: NumpyArray

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> target = predictor.create_target(gt)



   .. py:method:: create_weight(gt, target, mask, moving_class_counts=None)

      Create the weight array for training.

      :param gt: The ground truth array.
      :param target: The target array.
      :param mask: The mask array.
      :param moving_class_counts: The moving class counts.

      :returns: The created weight array and None.
      :rtype: Tuple[NumpyArray, None]

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.create_weight(gt, target, mask, moving_class_counts)



   .. py:property:: output_array_type
      Get the output array type.

      :returns: The output array type.
      :rtype: ProbabilityArray

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> output_array_type = predictor.output_array_type


   .. py:method:: process(labels: numpy.ndarray)

      Process the labels array and convert it to one-hot encoding.

      :param labels: The labels array.
      :type labels: np.ndarray

      :returns: The one-hot encoded array.
      :rtype: np.ndarray

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> one_hots = predictor.process(labels)

      .. rubric:: Notes

      Assumes labels has a singleton channel dim and channel dim is first.



.. py:class:: Task



   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: predictor
      :type:  dacapo.experiments.tasks.predictors.Predictor


   .. py:attribute:: loss
      :type:  dacapo.experiments.tasks.losses.Loss


   .. py:attribute:: evaluator
      :type:  dacapo.experiments.tasks.evaluators.Evaluator


   .. py:attribute:: post_processor
      :type:  dacapo.experiments.tasks.post_processors.PostProcessor


   .. py:property:: parameters
      :type: Iterable[dacapo.experiments.tasks.post_processors.PostProcessorParameters]



   .. py:property:: evaluation_scores
      :type: dacapo.experiments.tasks.evaluators.EvaluationScores



   .. py:method:: create_model(architecture)


.. py:class:: OneHotTask(task_config)



   A task that uses a one-hot predictor. The model is loaded from a file
   and the weights are loaded from a file. The loss is a dummy loss and the
   post processor is an argmax post processor. The evaluator is a dummy evaluator.

   .. attribute:: weights

      The path to the weights file.

      :type: Path

   .. method:: create_model(self, architecture) -> Model

      This method creates a model using the given architecture.

   .. rubric:: Notes

   This is a base class for all tasks that use one-hot predictors.


