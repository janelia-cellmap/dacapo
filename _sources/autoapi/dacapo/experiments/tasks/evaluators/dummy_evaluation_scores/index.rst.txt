dacapo.experiments.tasks.evaluators.dummy_evaluation_scores
===========================================================

.. py:module:: dacapo.experiments.tasks.evaluators.dummy_evaluation_scores


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.evaluators.dummy_evaluation_scores.DummyEvaluationScores


Module Contents
---------------

.. py:class:: DummyEvaluationScores



   The evaluation scores for the dummy task. The scores include the frizz level and blipp score. A higher frizz level indicates more frizz, while a higher blipp score indicates better performance.

   .. attribute:: frizz_level

      float
      the frizz level

   .. attribute:: blipp_score

      float
      the blipp score

   .. method:: higher_is_better(criterion)

      
      Return whether higher is better for the given criterion.

   .. method:: bounds(criterion)

      
      Return the bounds for the given criterion.

   .. method:: store_best(criterion)

      
      Return whether to store the best score for the given criterion.

   .. note:: The DummyEvaluationScores class is used to store the evaluation scores for the dummy task. The class also provides methods to determine whether higher is better for a given criterion, the bounds for a given criterion, and whether to store the best score for a given criterion.


   .. py:attribute:: criteria
      :value: ['frizz_level', 'blipp_score']


      The evaluation criteria.

      :returns:

                List[str]
                    the evaluation criteria

      :raises NotImplementedError: if the function is not implemented

      .. rubric:: Examples

      >>> evaluation_scores = EvaluationScores()
      >>> evaluation_scores.criteria
      ["criterion1", "criterion2"]

      .. note:: This function is used to return the evaluation criteria.


   .. py:attribute:: frizz_level
      :type:  float


   .. py:attribute:: blipp_score
      :type:  float


   .. py:method:: higher_is_better(criterion: str) -> bool
      :staticmethod:


      Return whether higher is better for the given criterion.

      :param criterion: str
                        the evaluation criterion

      :returns:

                bool
                    whether higher is better for this criterion

      :raises NotImplementedError: if the function is not implemented

      .. rubric:: Examples

      >>> DummyEvaluationScores.higher_is_better("frizz_level")
      True

      .. note:: This function is used to determine whether higher is better for the given criterion.



   .. py:method:: bounds(criterion: str) -> Tuple[Union[int, float, None], Union[int, float, None]]
      :staticmethod:


      Return the bounds for the given criterion.

      :param criterion: str
                        the evaluation criterion

      :returns:

                Tuple[Union[int, float, None], Union[int, float, None]]
                    the bounds for the given criterion

      :raises NotImplementedError: if the function is not implemented

      .. rubric:: Examples

      >>> DummyEvaluationScores.bounds("frizz_level")
      (0.0, 1.0)

      .. note:: This function is used to return the bounds for the given criterion.



   .. py:method:: store_best(criterion: str) -> bool
      :staticmethod:


      Return whether to store the best score for the given criterion.

      :param criterion: str
                        the evaluation criterion

      :returns:

                bool
                    whether to store the best score for the given criterion

      :raises NotImplementedError: if the function is not implemented

      .. rubric:: Examples

      >>> DummyEvaluationScores.store_best("frizz_level")
      True

      .. note:: This function is used to determine whether to store the best score for the given criterion.



