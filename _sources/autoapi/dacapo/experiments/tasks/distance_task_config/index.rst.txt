dacapo.experiments.tasks.distance_task_config
=============================================

.. py:module:: dacapo.experiments.tasks.distance_task_config


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.distance_task_config.DistanceTask
   dacapo.experiments.tasks.distance_task_config.TaskConfig
   dacapo.experiments.tasks.distance_task_config.DistanceTaskConfig


Module Contents
---------------

.. py:class:: DistanceTask(task_config)



   DistanceTask is a subclass of Task for handling tasks associated
   with Distance.

   DistanceTask uses `DistancePredictor` for prediction, `MSELoss` for
   computing loss, `ThresholdPostProcessor` for post-processing the
   prediction, and `BinarySegmentationEvaluator` for evaluating the
   prediction.

   .. attribute:: predictor

      DistancePredictor object

   .. attribute:: loss

      MSELoss object

   .. attribute:: post_processor

      ThresholdPostProcessor object

   .. attribute:: evaluator

      BinarySegmentationEvaluator object

   .. method:: __init__(self, task_config)

      Initializes attributes of DistanceTask

   .. rubric:: Notes

   This is a subclass of Task.


.. py:class:: TaskConfig

   Base class for task configurations. Each subclass of a `Task` should
   have a corresponding config class derived from `TaskConfig`.

   .. attribute:: name

      A unique name for this task. This will be saved so you and
      others can find and reuse this task. Keep it short and avoid
      special characters.

   .. method:: verify(self) -> Tuple[bool, str]

      This method verifies the TaskConfig object.

   .. rubric:: Notes

   This is a base class for all task configurations. It is not meant to be
   used directly.


   .. py:attribute:: name
      :type:  str


   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Task

      :returns:

                A tuple containing a boolean value indicating whether the TaskConfig object is valid
                    and a string containing the reason why the object is invalid.
      :rtype: Tuple[bool, str]

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> valid, reason = task_config.verify()



.. py:class:: DistanceTaskConfig



   This is a Distance task config used for generating and
   evaluating signed distance transforms as a way of generating
   segmentations.

   The advantage of generating distance transforms over regular
   affinities is you can get a denser signal, i.e. 1 misclassified
   pixel in an affinity prediction could merge 2 otherwise very
   distinct objects, this cannot happen with distances.

   .. attribute:: channels

      A list of channel names.

   .. attribute:: clip_distance

      Maximum distance to consider for false positive/negatives.

   .. attribute:: tol_distance

      Tolerance distance for counting false positives/negatives

   .. attribute:: scale_factor

      The amount by which to scale distances before applying a tanh normalization.

   .. attribute:: mask_distances

      Whether or not to mask out regions where the true distance to
      object boundary cannot be known. This is anywhere that the distance to crop boundary
      is less than the distance to object boundary.

   .. attribute:: clipmin

      The minimum value for distance weights.

   .. attribute:: clipmax

      The maximum value for distance weights.

   .. method:: verify(self) -> Tuple[bool, str]

      This method verifies the DistanceTaskConfig object.

   .. rubric:: Notes

   This is a subclass of TaskConfig.


   .. py:attribute:: task_type


   .. py:attribute:: channels
      :type:  List[str]


   .. py:attribute:: clip_distance
      :type:  float


   .. py:attribute:: tol_distance
      :type:  float


   .. py:attribute:: scale_factor
      :type:  float


   .. py:attribute:: mask_distances
      :type:  bool


   .. py:attribute:: clipmin
      :type:  float


   .. py:attribute:: clipmax
      :type:  float


