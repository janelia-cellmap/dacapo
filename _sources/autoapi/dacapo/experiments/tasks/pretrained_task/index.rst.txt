dacapo.experiments.tasks.pretrained_task
========================================

.. py:module:: dacapo.experiments.tasks.pretrained_task


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.pretrained_task.Task
   dacapo.experiments.tasks.pretrained_task.PretrainedTask


Module Contents
---------------

.. py:class:: Task



   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: predictor
      :type:  dacapo.experiments.tasks.predictors.Predictor


   .. py:attribute:: loss
      :type:  dacapo.experiments.tasks.losses.Loss


   .. py:attribute:: evaluator
      :type:  dacapo.experiments.tasks.evaluators.Evaluator


   .. py:attribute:: post_processor
      :type:  dacapo.experiments.tasks.post_processors.PostProcessor


   .. py:property:: parameters
      :type: Iterable[dacapo.experiments.tasks.post_processors.PostProcessorParameters]



   .. py:property:: evaluation_scores
      :type: dacapo.experiments.tasks.evaluators.EvaluationScores



   .. py:method:: create_model(architecture)


.. py:class:: PretrainedTask(task_config)



   A task that uses a pretrained model. The model is loaded from a file
   and the weights are loaded from a file.

   .. attribute:: weights

      The path to the weights file.

      :type: Path

   .. method:: create_model(self, architecture) -> Model

      This method creates a model using the given architecture.

   .. rubric:: Notes

   This is a base class for all tasks that use pretrained models.


   .. py:method:: create_model(architecture)

      Create a model using the given architecture.

      :param architecture: The architecture of the model.
      :type architecture: str

      :returns: The model created using the given architecture.
      :rtype: Model

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> model = task.create_model(architecture)



