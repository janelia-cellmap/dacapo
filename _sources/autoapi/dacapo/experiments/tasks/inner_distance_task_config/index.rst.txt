dacapo.experiments.tasks.inner_distance_task_config
===================================================

.. py:module:: dacapo.experiments.tasks.inner_distance_task_config


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.inner_distance_task_config.InnerDistanceTask
   dacapo.experiments.tasks.inner_distance_task_config.TaskConfig
   dacapo.experiments.tasks.inner_distance_task_config.InnerDistanceTaskConfig


Module Contents
---------------

.. py:class:: InnerDistanceTask(task_config)



   This class extends the Task class for creating tasks related to computing inner distances.
   It provides methods for prediction, loss calculation and post-processing. It includes Binary Segmentation Evaluator for evaluation.

   .. attribute:: task_config

      The configuration for the task.

   .. attribute:: predictor

      Used for predicting the inner distances.

   .. attribute:: loss

      Used for calculating the mean square error loss.

   .. attribute:: post_processor

      Used for applying threshold post-processing.

   .. attribute:: evaluator

      Used for evaluating the results using binary segmentation.

   .. method:: __init__(self, task_config)

      Initializes an instance of InnerDistanceTask.

   .. rubric:: Notes

   This is a subclass of Task.


.. py:class:: TaskConfig

   Base class for task configurations. Each subclass of a `Task` should
   have a corresponding config class derived from `TaskConfig`.

   .. attribute:: name

      A unique name for this task. This will be saved so you and
      others can find and reuse this task. Keep it short and avoid
      special characters.

   .. method:: verify(self) -> Tuple[bool, str]

      This method verifies the TaskConfig object.

   .. rubric:: Notes

   This is a base class for all task configurations. It is not meant to be
   used directly.


   .. py:attribute:: name
      :type:  str


   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Task

      :returns:

                A tuple containing a boolean value indicating whether the TaskConfig object is valid
                    and a string containing the reason why the object is invalid.
      :rtype: Tuple[bool, str]

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> valid, reason = task_config.verify()



.. py:class:: InnerDistanceTaskConfig



   This is a Distance task config used for generating and
   evaluating signed distance transforms as a way of generating
   segmentations.

   The advantage of generating distance transforms over regular
   affinities is you can get a denser signal, i.e. 1 misclassified
   pixel in an affinity prediction could merge 2 otherwise very
   distinct objects, this cannot happen with distances.

   .. attribute:: channels

      A list of channel names.

   .. attribute:: clip_distance

      Maximum distance to consider for false positive/negatives.

   .. attribute:: tol_distance

      Tolerance distance for counting false positives/negatives

   .. attribute:: scale_factor

      The amount by which to scale distances before applying a tanh normalization.

   .. rubric:: Notes

   This is a subclass of TaskConfig.


   .. py:attribute:: task_type


   .. py:attribute:: channels
      :type:  List[str]


   .. py:attribute:: clip_distance
      :type:  float


   .. py:attribute:: tol_distance
      :type:  float


   .. py:attribute:: scale_factor
      :type:  float


