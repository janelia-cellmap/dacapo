dacapo.experiments.tasks.post_processors.dummy_post_processor
=============================================================

.. py:module:: dacapo.experiments.tasks.post_processors.dummy_post_processor


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.post_processors.dummy_post_processor.DummyPostProcessor


Module Contents
---------------

.. py:class:: DummyPostProcessor(detection_threshold: float)



   Dummy post-processor that stores some dummy data. The dummy data is a 10x10x10
   array filled with the value of the min_size parameter. The min_size parameter
   is specified in the parameters of the post-processor. The post-processor has
   a detection threshold that is used to determine if an object is detected.

   .. attribute:: detection_threshold

      The detection threshold.

   .. method:: enumerate_parameters

      Enumerate all possible parameters of this post-processor.

   .. method:: set_prediction

      Set the prediction array identifier.

   .. method:: process

      Convert predictions into the final output.

   .. note::

      This class is abstract. Subclasses must implement the abstract methods. Once
      created, the values of its attributes cannot be changed.


   .. py:attribute:: detection_threshold


   .. py:method:: enumerate_parameters() -> Iterable[dacapo.experiments.tasks.post_processors.dummy_post_processor_parameters.DummyPostProcessorParameters]

      Enumerate all possible parameters of this post-processor. Should
      return instances of ``PostProcessorParameters``.

      :returns: An iterable of `PostProcessorParameters` instances.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = DummyPostProcessor()
      >>> for parameters in post_processor.enumerate_parameters():
      ...     print(parameters)
      DummyPostProcessorParameters(id=0, min_size=1)
      DummyPostProcessorParameters(id=1, min_size=2)
      DummyPostProcessorParameters(id=2, min_size=3)
      DummyPostProcessorParameters(id=3, min_size=4)
      DummyPostProcessorParameters(id=4, min_size=5)
      DummyPostProcessorParameters(id=5, min_size=6)
      DummyPostProcessorParameters(id=6, min_size=7)
      DummyPostProcessorParameters(id=7, min_size=8)
      DummyPostProcessorParameters(id=8, min_size=9)
      DummyPostProcessorParameters(id=9, min_size=10)

      .. note::

         This method must be implemented in the subclass. It should return an
         iterable of `PostProcessorParameters` instances.



   .. py:method:: set_prediction(prediction_array_identifier)

      Set the prediction array identifier.

      :param prediction_array_identifier: The identifier of the array containing
                                          the model's prediction.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = DummyPostProcessor()
      >>> post_processor.set_prediction("prediction")

      .. note::

         This method must be implemented in the subclass. It should set the
         `prediction_array_identifier` attribute.



   .. py:method:: process(parameters, output_array_identifier, *args, **kwargs)

      Convert predictions into the final output.

      :param parameters: The parameters of the post-processor.
      :param output_array_identifier: The identifier of the output array.
      :param num_workers: The number of workers to use.
      :param chunk_size: The size of the chunks to process.

      :returns: The output array.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = DummyPostProcessor()
      >>> post_processor.process(parameters, "output")

      .. note::

         This method must be implemented in the subclass. It should process the
         predictions and store the output in the output array.



