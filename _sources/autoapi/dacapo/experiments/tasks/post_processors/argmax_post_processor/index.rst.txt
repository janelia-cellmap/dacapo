dacapo.experiments.tasks.post_processors.argmax_post_processor
==============================================================

.. py:module:: dacapo.experiments.tasks.post_processors.argmax_post_processor


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.post_processors.argmax_post_processor.ArgmaxPostProcessor


Module Contents
---------------

.. py:class:: ArgmaxPostProcessor



   Post-processor that takes the argmax of the input array along the channel
   axis. The output is a binary array where the value is 1 if the argmax is
   greater than the threshold, and 0 otherwise.

   .. attribute:: prediction_array

      The array containing the model's prediction.

   .. method:: enumerate_parameters

      Enumerate all possible parameters of this post-processor.

   .. method:: set_prediction

      Set the prediction array identifier.

   .. method:: process

      Convert predictions into the final output.

   .. note::

      This class is abstract. Subclasses must implement the abstract methods. Once
      created, the values of its attributes cannot be changed.


   .. py:method:: enumerate_parameters()

      Enumerate all possible parameters of this post-processor. Should
      return instances of ``PostProcessorParameters``.

      :returns: An iterable of `PostProcessorParameters` instances.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = ArgmaxPostProcessor()
      >>> for parameters in post_processor.enumerate_parameters():
      ...     print(parameters)
      ArgmaxPostProcessorParameters(id=0)

      .. note::

         This method must be implemented in the subclass. It should return an
         iterable of `PostProcessorParameters` instances.



   .. py:method:: set_prediction(prediction_array_identifier)

      Set the prediction array identifier.

      :param prediction_array_identifier: The identifier of the array containing
                                          the model's prediction.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = ArgmaxPostProcessor()
      >>> post_processor.set_prediction("prediction")

      .. note::

         This method must be implemented in the subclass. It should set the
         `prediction_array_identifier` attribute.



   .. py:method:: process(parameters, output_array_identifier: dacapo.store.array_store.LocalArrayIdentifier, num_workers: int = 16, block_size: daisy.Coordinate = Coordinate((256, 256, 256)))

      Convert predictions into the final output.

      :param parameters: The parameters of the post-processor.
      :param output_array_identifier: The identifier of the output array.
      :param num_workers: The number of workers to use.
      :param block_size: The size of the blocks to process.

      :returns: The output array.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = ArgmaxPostProcessor()
      >>> post_processor.set_prediction("prediction")
      >>> post_processor.process(parameters, "output")

      .. note::

         This method must be implemented in the subclass. It should process the
         predictions and return the output array.



