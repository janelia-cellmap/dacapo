dacapo.experiments.tasks.post_processors.post_processor
=======================================================

.. py:module:: dacapo.experiments.tasks.post_processors.post_processor


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.post_processors.post_processor.PostProcessor


Module Contents
---------------

.. py:class:: PostProcessor



   Base class of all post-processors.

   A post-processor takes a model's prediction and converts it into the final
   output (e.g., per-voxel class probabilities into a semantic segmentation). A
   post-processor can have multiple parameters, which can be enumerated using
   the `enumerate_parameters` method. The `process` method takes a set of
   parameters and applies the post-processing to the prediction.

   .. attribute:: prediction_array_identifier

      The identifier of the array containing the
      model's prediction.

   .. method:: enumerate_parameters

      Enumerate all possible parameters of this
      post-processor.

   .. method:: set_prediction

      Set the prediction array identifier.

   .. method:: process

      Convert predictions into the final output.

   .. note::

      This class is abstract. Subclasses must implement the abstract methods. Once
      created, the values of its attributes cannot be changed.


   .. py:method:: enumerate_parameters() -> Iterable[dacapo.experiments.tasks.post_processors.post_processor_parameters.PostProcessorParameters]
      :abstractmethod:


      Enumerate all possible parameters of this post-processor.

      :returns: An iterable of `PostProcessorParameters` instances.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = MyPostProcessor()
      >>> for parameters in post_processor.enumerate_parameters():
      ...     print(parameters)
      MyPostProcessorParameters(param1=0.0, param2=0.0)
      MyPostProcessorParameters(param1=0.0, param2=1.0)
      MyPostProcessorParameters(param1=1.0, param2=0.0)
      MyPostProcessorParameters(param1=1.0, param2=1.0)

      .. note::

         This method must be implemented in the subclass. It should return an
         iterable of `PostProcessorParameters` instances.



   .. py:method:: set_prediction(prediction_array_identifier: dacapo.store.local_array_store.LocalArrayIdentifier) -> None
      :abstractmethod:


      Set the prediction array identifier.

      :param prediction_array_identifier: The identifier of the array containing
                                          the model's prediction.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = MyPostProcessor()
      >>> post_processor.set_prediction("prediction")

      .. note::

         This method must be implemented in the subclass. It should set the
         `prediction_array_identifier` attribute.



   .. py:method:: process(parameters: dacapo.experiments.tasks.post_processors.post_processor_parameters.PostProcessorParameters, output_array_identifier: dacapo.store.local_array_store.LocalArrayIdentifier, num_workers: int = 16, chunk_size: funlib.geometry.Coordinate = Coordinate((64, 64, 64))) -> funlib.persistence.Array
      :abstractmethod:


      Convert predictions into the final output.

      :param parameters: The parameters of the post-processor.
      :param output_array_identifier: The identifier of the array to store the
                                      output.
      :param num_workers: The number of workers to use.
      :param chunk_size: The size of the chunks to process.

      :returns: The output array.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = MyPostProcessor()
      >>> post_processor.set_prediction("prediction")
      >>> parameters = MyPostProcessorParameters(param1=0.0, param2=0.0)
      >>> output = post_processor.process(parameters, "output")

      .. note::

         This method must be implemented in the subclass. It should convert the
         model's prediction into the final output.



