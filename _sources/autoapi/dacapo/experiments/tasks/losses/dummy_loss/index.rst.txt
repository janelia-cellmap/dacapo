dacapo.experiments.tasks.losses.dummy_loss
==========================================

.. py:module:: dacapo.experiments.tasks.losses.dummy_loss


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.losses.dummy_loss.Loss
   dacapo.experiments.tasks.losses.dummy_loss.DummyLoss


Module Contents
---------------

.. py:class:: Loss



   A class used to represent a loss function. This class is an abstract class
   that should be inherited by any loss function class.

   .. method:: compute(prediction, target, weight) -> torch.Tensor

      
      Function to compute the loss for the provided prediction and target, with respect to the weight.

   .. note::

      This class is abstract. Subclasses must implement the abstract methods. Once created, the values of its attributes
      cannot be changed.


   .. py:method:: compute(prediction: torch.Tensor, target: torch.Tensor, weight: Optional[torch.Tensor] = None) -> torch.Tensor
      :abstractmethod:


      Compute the loss for the given prediction and target. Optionally, if
      given, a loss weight should be considered.

      All arguments are ``torch`` tensors. The return type should be a
      ``torch`` scalar that can be used with an optimizer, just as usual when
      training with ``torch``.

      :param prediction: The predicted tensor.
      :param target: The target tensor.
      :param weight: The weight tensor.

      :returns: The computed loss tensor.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> loss = MSELoss()
      >>> prediction = torch.tensor([1.0, 2.0, 3.0])
      >>> target = torch.tensor([1.0, 2.0, 3.0])
      >>> weight = torch.tensor([1.0, 1.0, 1.0])
      >>> loss.compute(prediction, target, weight)
      tensor(0.)

      .. note::

         This method must be implemented in the subclass. It should return the
         computed loss tensor.



.. py:class:: DummyLoss



   A class representing a dummy loss function that calculates the absolute difference between each prediction and target.

   Inherits the Loss class.

   .. attribute:: name

      str
      name of the loss function

   .. method:: compute(prediction, target, weight=None)

      
      Calculate the total loss between prediction and target.

   .. note::

      The dummy loss is used to test the training loop and the loss calculation. It is not a real loss function.
      It is used to test the training loop and the loss calculation.


   .. py:method:: compute(prediction, target, weight=None)

      Method to calculate the total dummy loss.

      :param prediction: torch.Tensor
                         the model's prediction
      :param target: torch.Tensor
                     the target values
      :param weight: torch.Tensor
                     the weight to apply to the loss

      :returns:

                torch.Tensor
                    the total loss between prediction and target

      .. rubric:: Examples

      >>> dummy_loss = DummyLoss()
      >>> prediction = torch.tensor([1, 2, 3])
      >>> target = torch.tensor([4, 5, 6])
      >>> dummy_loss.compute(prediction, target)
      tensor(9)

      .. note::

         The dummy loss is used to test the training loop and the loss calculation. It is not a real loss function.
         It is used to test the training loop and the loss calculation.



