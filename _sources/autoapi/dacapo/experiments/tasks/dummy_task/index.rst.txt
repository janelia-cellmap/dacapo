dacapo.experiments.tasks.dummy_task
===================================

.. py:module:: dacapo.experiments.tasks.dummy_task


Classes
-------

.. autoapisummary::

   dacapo.experiments.tasks.dummy_task.DummyEvaluator
   dacapo.experiments.tasks.dummy_task.DummyLoss
   dacapo.experiments.tasks.dummy_task.DummyPostProcessor
   dacapo.experiments.tasks.dummy_task.DummyPredictor
   dacapo.experiments.tasks.dummy_task.Task
   dacapo.experiments.tasks.dummy_task.DummyTask


Module Contents
---------------

.. py:class:: DummyEvaluator



   A class representing a dummy evaluator. This evaluator is used for testing purposes.

   .. attribute:: criteria

      List[str]
      the evaluation criteria

   .. method:: evaluate(output_array_identifier, evaluation_dataset)

      
      Evaluate the output array against the evaluation dataset.

   .. method:: score

      
      Return the evaluation scores.

   .. note:: The DummyEvaluator class is used to evaluate the performance of a dummy task.


   .. py:attribute:: criteria
      :value: ['frizz_level', 'blipp_score']



   .. py:method:: evaluate(output_array_identifier, evaluation_dataset)

      Evaluate the given output array and dataset and returns the scores based on predefined criteria.

      :param output_array_identifier: The output array to be evaluated.
      :param evaluation_dataset: The dataset to be used for evaluation.

      :returns: An object of DummyEvaluationScores class, with the evaluation scores.
      :rtype: DummyEvaluationScore

      :raises ValueError: if the output array identifier is not valid

      .. rubric:: Examples

      >>> dummy_evaluator = DummyEvaluator()
      >>> output_array_identifier = "output_array"
      >>> evaluation_dataset = "evaluation_dataset"
      >>> dummy_evaluator.evaluate(output_array_identifier, evaluation_dataset)
      DummyEvaluationScores(frizz_level=0.0, blipp_score=0.0)

      .. note:: This function is used to evaluate the output array against the evaluation dataset.



   .. py:property:: score
      :type: dacapo.experiments.tasks.evaluators.dummy_evaluation_scores.DummyEvaluationScores

      Return the evaluation scores.

      :returns: An object of DummyEvaluationScores class, with the evaluation scores.
      :rtype: DummyEvaluationScores

      .. rubric:: Examples

      >>> dummy_evaluator = DummyEvaluator()
      >>> dummy_evaluator.score
      DummyEvaluationScores(frizz_level=0.0, blipp_score=0.0)

      .. note:: This function is used to return the evaluation scores.


.. py:class:: DummyLoss



   A class representing a dummy loss function that calculates the absolute difference between each prediction and target.

   Inherits the Loss class.

   .. attribute:: name

      str
      name of the loss function

   .. method:: compute(prediction, target, weight=None)

      
      Calculate the total loss between prediction and target.

   .. note::

      The dummy loss is used to test the training loop and the loss calculation. It is not a real loss function.
      It is used to test the training loop and the loss calculation.


   .. py:method:: compute(prediction, target, weight=None)

      Method to calculate the total dummy loss.

      :param prediction: torch.Tensor
                         the model's prediction
      :param target: torch.Tensor
                     the target values
      :param weight: torch.Tensor
                     the weight to apply to the loss

      :returns:

                torch.Tensor
                    the total loss between prediction and target

      .. rubric:: Examples

      >>> dummy_loss = DummyLoss()
      >>> prediction = torch.tensor([1, 2, 3])
      >>> target = torch.tensor([4, 5, 6])
      >>> dummy_loss.compute(prediction, target)
      tensor(9)

      .. note::

         The dummy loss is used to test the training loop and the loss calculation. It is not a real loss function.
         It is used to test the training loop and the loss calculation.



.. py:class:: DummyPostProcessor(detection_threshold: float)



   Dummy post-processor that stores some dummy data. The dummy data is a 10x10x10
   array filled with the value of the min_size parameter. The min_size parameter
   is specified in the parameters of the post-processor. The post-processor has
   a detection threshold that is used to determine if an object is detected.

   .. attribute:: detection_threshold

      The detection threshold.

   .. method:: enumerate_parameters

      Enumerate all possible parameters of this post-processor.

   .. method:: set_prediction

      Set the prediction array identifier.

   .. method:: process

      Convert predictions into the final output.

   .. note::

      This class is abstract. Subclasses must implement the abstract methods. Once
      created, the values of its attributes cannot be changed.


   .. py:method:: enumerate_parameters() -> Iterable[dacapo.experiments.tasks.post_processors.dummy_post_processor_parameters.DummyPostProcessorParameters]

      Enumerate all possible parameters of this post-processor. Should
      return instances of ``PostProcessorParameters``.

      :returns: An iterable of `PostProcessorParameters` instances.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = DummyPostProcessor()
      >>> for parameters in post_processor.enumerate_parameters():
      ...     print(parameters)
      DummyPostProcessorParameters(id=0, min_size=1)
      DummyPostProcessorParameters(id=1, min_size=2)
      DummyPostProcessorParameters(id=2, min_size=3)
      DummyPostProcessorParameters(id=3, min_size=4)
      DummyPostProcessorParameters(id=4, min_size=5)
      DummyPostProcessorParameters(id=5, min_size=6)
      DummyPostProcessorParameters(id=6, min_size=7)
      DummyPostProcessorParameters(id=7, min_size=8)
      DummyPostProcessorParameters(id=8, min_size=9)
      DummyPostProcessorParameters(id=9, min_size=10)

      .. note::

         This method must be implemented in the subclass. It should return an
         iterable of `PostProcessorParameters` instances.



   .. py:method:: set_prediction(prediction_array_identifier)

      Set the prediction array identifier.

      :param prediction_array_identifier: The identifier of the array containing
                                          the model's prediction.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = DummyPostProcessor()
      >>> post_processor.set_prediction("prediction")

      .. note::

         This method must be implemented in the subclass. It should set the
         `prediction_array_identifier` attribute.



   .. py:method:: process(parameters, output_array_identifier, *args, **kwargs)

      Convert predictions into the final output.

      :param parameters: The parameters of the post-processor.
      :param output_array_identifier: The identifier of the output array.
      :param num_workers: The number of workers to use.
      :param chunk_size: The size of the chunks to process.

      :returns: The output array.

      :raises NotImplementedError: If the method is not implemented in the subclass.

      .. rubric:: Examples

      >>> post_processor = DummyPostProcessor()
      >>> post_processor.process(parameters, "output")

      .. note::

         This method must be implemented in the subclass. It should process the
         predictions and store the output in the output array.



.. py:class:: DummyPredictor(embedding_dims)



   A dummy predictor class that inherits from the base Predictor class.

   .. attribute:: embedding_dims

      The number of embedding dimensions.

      :type: int

   .. method:: __init__(self, embedding_dims

      int): Initializes a new instance of the DummyPredictor class.

   .. method:: create_model(self, architecture)

      Creates a model using the given architecture.

   .. method:: create_target(self, gt)

      Creates a target based on the ground truth.

   .. method:: create_weight(self, gt, target, mask, moving_class_counts=None)

      Creates a weight based on the ground truth, target, and mask.

   .. method:: output_array_type

      Gets the output array type.

   .. rubric:: Notes

   This is a subclass of Predictor.


   .. py:method:: create_model(architecture)

      Creates a model using the given architecture.

      :param architecture: The architecture to use for creating the model.

      :returns: The created model.
      :rtype: Model

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> model = predictor.create_model(architecture)



   .. py:method:: create_target(gt)

      Creates a target based on the ground truth.

      :param gt: The ground truth.

      :returns: The created target.
      :rtype: NumpyArray

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.create_target(gt)



   .. py:method:: create_weight(gt, target, mask, moving_class_counts=None)

      Creates a weight based on the ground truth, target, and mask.

      :param gt: The ground truth.
      :param target: The target.
      :param mask: The mask.
      :param moving_class_counts: The moving class counts.

      :returns: The created weight and None.
      :rtype: Tuple[NumpyArray, None]

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.create_weight(gt, target, mask, moving_class_counts)



   .. py:property:: output_array_type
      Gets the output array type.

      :returns: The output array type.
      :rtype: EmbeddingArray

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> predictor.output_array_type


.. py:class:: Task



   Helper class that provides a standard way to create an ABC using
   inheritance.


   .. py:attribute:: predictor
      :type:  dacapo.experiments.tasks.predictors.Predictor


   .. py:attribute:: loss
      :type:  dacapo.experiments.tasks.losses.Loss


   .. py:attribute:: evaluator
      :type:  dacapo.experiments.tasks.evaluators.Evaluator


   .. py:attribute:: post_processor
      :type:  dacapo.experiments.tasks.post_processors.PostProcessor


   .. py:property:: parameters
      :type: Iterable[dacapo.experiments.tasks.post_processors.PostProcessorParameters]



   .. py:property:: evaluation_scores
      :type: dacapo.experiments.tasks.evaluators.EvaluationScores



   .. py:method:: create_model(architecture)


.. py:class:: DummyTask(task_config)



   A dummy task class that initializes all components (predictor, loss,
   post-processing, and evaluator) for the dummy task. Primarily used for testing purposes.
   Inherits from the Task class.

   .. attribute:: predictor

      Object
      Instance of DummyPredictor class.

   .. attribute:: loss

      Object
      Instance of DummyLoss class.

   .. attribute:: post_processor

      Object
      Instance of DummyPostProcessor class.

   .. attribute:: evaluator

      Object
      Instance of DummyEvaluator class.

   .. method:: __init__(self, task_config)

      
      Initializes all components for the dummy task.

   .. rubric:: Notes

   This is a subclass of Task.


