dacapo.experiments.datasplits.datasets.arrays.ones_array
========================================================

.. py:module:: dacapo.experiments.datasplits.datasets.arrays.ones_array


Classes
-------

.. autoapisummary::

   dacapo.experiments.datasplits.datasets.arrays.ones_array.Array
   dacapo.experiments.datasplits.datasets.arrays.ones_array.OnesArray


Module Contents
---------------

.. py:class:: Array



   An Array is a multi-dimensional array of data that can be read from and written to. It is
   defined by a region of interest (ROI) in world units, a voxel size, and a number of spatial
   dimensions. The data is stored in a numpy array, and can be accessed using numpy-like slicing
   syntax.

   The Array class is an abstract base class that defines the interface for all Array
   implementations. It provides a number of properties that must be implemented by subclasses,
   such as the ROI, voxel size, and data type of the array. It also provides a method for fetching
   data from the array, which is implemented by slicing the numpy array.

   The Array class also provides a method for checking if the array can be visualized in
   Neuroglancer, and a method for generating a Neuroglancer layer for the array. These methods are
   implemented by subclasses that support visualization in Neuroglancer.

   .. attribute:: attrs

      A dictionary of metadata attributes stored on this array.

      :type: Dict[str, Any]

   .. attribute:: axes

      The axes of this dataset as a string of characters, as they are indexed.
      Permitted characters are:
          * ``zyx`` for spatial dimensions
          * ``c`` for channels
          * ``s`` for samples

      :type: List[str]

   .. attribute:: dims

      The number of spatial dimensions.

      :type: int

   .. attribute:: voxel_size

      The size of a voxel in physical units.

      :type: Coordinate

   .. attribute:: roi

      The total ROI of this array, in world units.

      :type: Roi

   .. attribute:: dtype

      The dtype of this array, in numpy dtypes

      :type: Any

   .. attribute:: num_channels

      The number of channels provided by this dataset. Should return
      None if the channel dimension doesn't exist.

      :type: Optional[int]

   .. attribute:: data

      A numpy-like readable and writable view into this array.

      :type: np.ndarray

   .. attribute:: writable

      Can we write to this Array?

      :type: bool

   .. method:: __getitem__(self, roi

      Roi) -> np.ndarray: Get a numpy like readable and writable view into
      this array.

   .. method:: _can_neuroglance(self) -> bool

      Check if this array can be visualized in Neuroglancer.

   .. method:: _neuroglancer_layer(self)

      Generate a Neuroglancer layer for this array.

   .. method:: _slices(self, roi

      Roi) -> Iterable[slice]: Generate a list of slices for the given ROI.

   .. note::

      This class is used to define the interface for all Array implementations. It provides a
      number of properties that must be implemented by subclasses, such as the ROI, voxel size, and
      data type of the array. It also provides a method for fetching data from the array, which is
      implemented by slicing the numpy array. The Array class also provides a method for checking
      if the array can be visualized in Neuroglancer, and a method for generating a Neuroglancer
      layer for the array. These methods are implemented by subclasses that support visualization
      in Neuroglancer.


   .. py:property:: attrs
      :type: Dict[str, Any]

      :abstractmethod:

      Return a dictionary of metadata attributes stored on this array.

      :returns: A dictionary of metadata attributes stored on this array.
      :rtype: Dict[str, Any]

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.attrs
      {}

      .. note:: This method must be implemented by the subclass.


   .. py:property:: axes
      :type: List[str]

      :abstractmethod:

      Returns the axes of this dataset as a string of charactes, as they
      are indexed. Permitted characters are:

          * ``zyx`` for spatial dimensions
          * ``c`` for channels
          * ``s`` for samples

      :returns: The axes of this dataset as a string of characters, as they are indexed.
      :rtype: List[str]

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.axes
      ['z', 'y', 'x']

      .. note:: This method must be implemented by the subclass.


   .. py:property:: dims
      :type: int

      :abstractmethod:

      Returns the number of spatial dimensions.

      :returns: The number of spatial dimensions.
      :rtype: int

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.dims
      3

      .. note:: This method must be implemented by the subclass.


   .. py:property:: voxel_size
      :type: funlib.geometry.Coordinate

      :abstractmethod:

      The size of a voxel in physical units.

      :returns: The size of a voxel in physical units.
      :rtype: Coordinate

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.voxel_size
      Coordinate((1, 1, 1))

      .. note:: This method must be implemented by the subclass.


   .. py:property:: roi
      :type: funlib.geometry.Roi

      :abstractmethod:

      The total ROI of this array, in world units.

      :returns: The total ROI of this array, in world units.
      :rtype: Roi

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.roi
      Roi(offset=Coordinate((0, 0, 0)), shape=Coordinate((100, 100, 100)))

      .. note:: This method must be implemented by the subclass.


   .. py:property:: dtype
      :type: Any

      :abstractmethod:

      The dtype of this array, in numpy dtypes

      :returns: The dtype of this array, in numpy dtypes.
      :rtype: Any

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.dtype
      np.dtype('uint8')

      .. note:: This method must be implemented by the subclass.


   .. py:property:: num_channels
      :type: Optional[int]

      :abstractmethod:

      The number of channels provided by this dataset.
      Should return None if the channel dimension doesn't exist.

      :returns: The number of channels provided by this dataset.
      :rtype: Optional[int]

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.num_channels
      1

      .. note:: This method must be implemented by the subclass.


   .. py:property:: data
      :type: numpy.ndarray

      :abstractmethod:

      Get a numpy like readable and writable view into this array.

      :returns: A numpy like readable and writable view into this array.
      :rtype: np.ndarray

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.data
      np.ndarray

      .. note:: This method must be implemented by the subclass.


   .. py:property:: writable
      :type: bool

      :abstractmethod:

      Can we write to this Array?

      :returns: Can we write to this Array?
      :rtype: bool

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.writable
      False

      .. note:: This method must be implemented by the subclass.


.. py:class:: OnesArray(array_config)



   This is a wrapper around another `source_array` that simply provides ones
   with the same metadata as the `source_array`.

   This is useful for creating a mask array that is the same size as the
   original array, but with all values set to 1.

   .. attribute:: source_array

      The source array that this array is based on.

   .. method:: like

      Create a new OnesArray with the same metadata as another array.

   .. method:: attrs

      Get the attributes of the array.

   .. method:: axes

      Get the axes of the array.

   .. method:: dims

      Get the dimensions of the array.

   .. method:: voxel_size

      Get the voxel size of the array.

   .. method:: roi

      Get the region of interest of the array.

   .. method:: writable

      Check if the array is writable.

   .. method:: data

      Get the data of the array.

   .. method:: dtype

      Get the data type of the array.

   .. method:: num_channels

      Get the number of channels of the array.

   .. method:: __getitem__

      Get a subarray of the array.

   .. note::

      This class is not meant to be instantiated directly. Instead, use the
      `like` method to create a new OnesArray with the same metadata as
      another array.


   .. py:method:: like(array: dacapo.experiments.datasplits.datasets.arrays.array.Array)
      :classmethod:


      Create a new OnesArray with the same metadata as another array.

      :param array: The source array.

      :returns: The new OnesArray with the same metadata as the source array.

      :raises RuntimeError: If the source array is not specified.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray.like(source_array)
      >>> ones_array.source_array
      NumpyArray(data=array([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]), voxel_size=(1.0, 1.0, 1.0), roi=Roi((0, 0, 0), (10, 10, 10)), num_channels=1)

      .. rubric:: Notes

      This class is not meant to be instantiated directly. Instead, use the
      `like` method to create a new OnesArray with the same metadata as
      another array.



   .. py:property:: attrs
      Get the attributes of the array.

      :returns: An empty dictionary.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray(source_array)
      >>> ones_array.attrs
      {}

      .. rubric:: Notes

      This method is used to get the attributes of the array. The attributes
      are stored as key-value pairs in a dictionary. This method returns an
      empty dictionary because the OnesArray does not have any attributes.


   .. py:property:: source_array
      :type: dacapo.experiments.datasplits.datasets.arrays.array.Array

      Get the source array that this array is based on.

      :returns: The source array.

      :raises RuntimeError: If the source array is not specified.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray(source_array)
      >>> ones_array.source_array
      NumpyArray(data=array([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                              [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]), voxel_size=(1.0, 1.0, 1.0), roi=Roi((0, 0, 0), (10, 10, 10)), num_channels=1)

      .. rubric:: Notes

      This method is used to get the source array that this array is based on.
      The source array is the array that the OnesArray is created from. This
      method returns the source array that was specified when the OnesArray
      was created.


   .. py:property:: axes
      Get the axes of the array.

      :returns: The axes of the array.

      :raises RuntimeError: If the axes are not specified.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray(source_array)
      >>> ones_array.axes
      'zyx'

      .. rubric:: Notes

      This method is used to get the axes of the array. The axes are the
      order of the dimensions of the array. This method returns the axes of
      the array that was specified when the OnesArray was created.


   .. py:property:: dims
      Get the dimensions of the array.

      :returns: The dimensions of the array.

      :raises RuntimeError: If the dimensions are not specified.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray(source_array)
      >>> ones_array.dims
      (10, 10, 10)

      .. rubric:: Notes

      This method is used to get the dimensions of the array. The dimensions
      are the size of the array along each axis. This method returns the
      dimensions of the array that was specified when the OnesArray was created.


   .. py:property:: voxel_size
      Get the voxel size of the array.

      :returns: The voxel size of the array.

      :raises RuntimeError: If the voxel size is not specified.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray(source_array)
      >>> ones_array.voxel_size
      (1.0, 1.0, 1.0)

      .. rubric:: Notes

      This method is used to get the voxel size of the array. The voxel size
      is the size of each voxel in the array. This method returns the voxel
      size of the array that was specified when the OnesArray was created.


   .. py:property:: roi
      Get the region of interest of the array.

      :returns: The region of interest of the array.

      :raises RuntimeError: If the region of interest is not specified.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> from funlib.geometry import Roi
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray(source_array)
      >>> ones_array.roi
      Roi((0, 0, 0), (10, 10, 10))

      .. rubric:: Notes

      This method is used to get the region of interest of the array. The
      region of interest is the region of the array that contains the data.
      This method returns the region of interest of the array that was specified
      when the OnesArray was created.


   .. py:property:: writable
      :type: bool

      Check if the array is writable.

      :returns: False.

      :raises RuntimeError: If the writability of the array is not specified.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray(source_array)
      >>> ones_array.writable
      False

      .. rubric:: Notes

      This method is used to check if the array is writable. An array is
      writable if it can be modified in place. This method returns False
      because the OnesArray is read-only and cannot be modified.


   .. py:property:: data
      Get the data of the array.

      :returns: The data of the array.

      :raises RuntimeError: If the data is not specified.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray(source_array)
      >>> ones_array.data
      array([[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]])

      .. rubric:: Notes

      This method is used to get the data of the array. The data is the
      values that are stored in the array. This method returns a subarray
      of the array with all values set to 1.


   .. py:property:: dtype
      Get the data type of the array.

      :returns: The data type of the array.

      :raises RuntimeError: If the data type is not specified.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray(source_array)
      >>> ones_array.dtype
      <class 'numpy.bool_'>

      .. rubric:: Notes

      This method is used to get the data type of the array. The data type
      is the type of the values that are stored in the array. This method
      returns the data type of the array that was specified when the OnesArray
      was created.


   .. py:property:: num_channels
      Get the number of channels of the array.

      :returns: The number of channels of the array.

      :raises RuntimeError: If the number of channels is not specified.

      .. rubric:: Examples

      >>> from dacapo.experiments.datasplits.datasets.arrays import OnesArray
      >>> from dacapo.experiments.datasplits.datasets.arrays import NumpyArray
      >>> import numpy as np
      >>> source_array = NumpyArray(np.zeros((10, 10, 10)))
      >>> ones_array = OnesArray(source_array)
      >>> ones_array.num_channels
      1

      .. rubric:: Notes

      This method is used to get the number of channels of the array. The
      number of channels is the number of values that are stored at each
      voxel in the array. This method returns the number of channels of the
      array that was specified when the OnesArray was created.


