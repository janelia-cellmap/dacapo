dacapo.experiments.datasplits.datasets.arrays.logical_or_array
==============================================================

.. py:module:: dacapo.experiments.datasplits.datasets.arrays.logical_or_array


Classes
-------

.. autoapisummary::

   dacapo.experiments.datasplits.datasets.arrays.logical_or_array.Array
   dacapo.experiments.datasplits.datasets.arrays.logical_or_array.LogicalOrArray


Module Contents
---------------

.. py:class:: Array



   An Array is a multi-dimensional array of data that can be read from and written to. It is
   defined by a region of interest (ROI) in world units, a voxel size, and a number of spatial
   dimensions. The data is stored in a numpy array, and can be accessed using numpy-like slicing
   syntax.

   The Array class is an abstract base class that defines the interface for all Array
   implementations. It provides a number of properties that must be implemented by subclasses,
   such as the ROI, voxel size, and data type of the array. It also provides a method for fetching
   data from the array, which is implemented by slicing the numpy array.

   The Array class also provides a method for checking if the array can be visualized in
   Neuroglancer, and a method for generating a Neuroglancer layer for the array. These methods are
   implemented by subclasses that support visualization in Neuroglancer.

   .. attribute:: attrs

      A dictionary of metadata attributes stored on this array.

      :type: Dict[str, Any]

   .. attribute:: axes

      The axes of this dataset as a string of characters, as they are indexed.
      Permitted characters are:
          * ``zyx`` for spatial dimensions
          * ``c`` for channels
          * ``s`` for samples

      :type: List[str]

   .. attribute:: dims

      The number of spatial dimensions.

      :type: int

   .. attribute:: voxel_size

      The size of a voxel in physical units.

      :type: Coordinate

   .. attribute:: roi

      The total ROI of this array, in world units.

      :type: Roi

   .. attribute:: dtype

      The dtype of this array, in numpy dtypes

      :type: Any

   .. attribute:: num_channels

      The number of channels provided by this dataset. Should return
      None if the channel dimension doesn't exist.

      :type: Optional[int]

   .. attribute:: data

      A numpy-like readable and writable view into this array.

      :type: np.ndarray

   .. attribute:: writable

      Can we write to this Array?

      :type: bool

   .. method:: __getitem__(self, roi

      Roi) -> np.ndarray: Get a numpy like readable and writable view into
      this array.

   .. method:: _can_neuroglance(self) -> bool

      Check if this array can be visualized in Neuroglancer.

   .. method:: _neuroglancer_layer(self)

      Generate a Neuroglancer layer for this array.

   .. method:: _slices(self, roi

      Roi) -> Iterable[slice]: Generate a list of slices for the given ROI.

   .. note::

      This class is used to define the interface for all Array implementations. It provides a
      number of properties that must be implemented by subclasses, such as the ROI, voxel size, and
      data type of the array. It also provides a method for fetching data from the array, which is
      implemented by slicing the numpy array. The Array class also provides a method for checking
      if the array can be visualized in Neuroglancer, and a method for generating a Neuroglancer
      layer for the array. These methods are implemented by subclasses that support visualization
      in Neuroglancer.


   .. py:property:: attrs
      :type: Dict[str, Any]

      :abstractmethod:

      Return a dictionary of metadata attributes stored on this array.

      :returns: A dictionary of metadata attributes stored on this array.
      :rtype: Dict[str, Any]

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.attrs
      {}

      .. note:: This method must be implemented by the subclass.


   .. py:property:: axes
      :type: List[str]

      :abstractmethod:

      Returns the axes of this dataset as a string of charactes, as they
      are indexed. Permitted characters are:

          * ``zyx`` for spatial dimensions
          * ``c`` for channels
          * ``s`` for samples

      :returns: The axes of this dataset as a string of characters, as they are indexed.
      :rtype: List[str]

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.axes
      ['z', 'y', 'x']

      .. note:: This method must be implemented by the subclass.


   .. py:property:: dims
      :type: int

      :abstractmethod:

      Returns the number of spatial dimensions.

      :returns: The number of spatial dimensions.
      :rtype: int

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.dims
      3

      .. note:: This method must be implemented by the subclass.


   .. py:property:: voxel_size
      :type: funlib.geometry.Coordinate

      :abstractmethod:

      The size of a voxel in physical units.

      :returns: The size of a voxel in physical units.
      :rtype: Coordinate

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.voxel_size
      Coordinate((1, 1, 1))

      .. note:: This method must be implemented by the subclass.


   .. py:property:: roi
      :type: funlib.geometry.Roi

      :abstractmethod:

      The total ROI of this array, in world units.

      :returns: The total ROI of this array, in world units.
      :rtype: Roi

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.roi
      Roi(offset=Coordinate((0, 0, 0)), shape=Coordinate((100, 100, 100)))

      .. note:: This method must be implemented by the subclass.


   .. py:property:: dtype
      :type: Any

      :abstractmethod:

      The dtype of this array, in numpy dtypes

      :returns: The dtype of this array, in numpy dtypes.
      :rtype: Any

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.dtype
      np.dtype('uint8')

      .. note:: This method must be implemented by the subclass.


   .. py:property:: num_channels
      :type: Optional[int]

      :abstractmethod:

      The number of channels provided by this dataset.
      Should return None if the channel dimension doesn't exist.

      :returns: The number of channels provided by this dataset.
      :rtype: Optional[int]

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.num_channels
      1

      .. note:: This method must be implemented by the subclass.


   .. py:property:: data
      :type: numpy.ndarray

      :abstractmethod:

      Get a numpy like readable and writable view into this array.

      :returns: A numpy like readable and writable view into this array.
      :rtype: np.ndarray

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.data
      np.ndarray

      .. note:: This method must be implemented by the subclass.


   .. py:property:: writable
      :type: bool

      :abstractmethod:

      Can we write to this Array?

      :returns: Can we write to this Array?
      :rtype: bool

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.writable
      False

      .. note:: This method must be implemented by the subclass.


.. py:class:: LogicalOrArray(array_config)



   Array that computes the logical OR of the instances in a list of source arrays.

   .. attribute:: name

      str
      The name of the array

   .. attribute:: source_array

      Array
      The source array from which to take the logical OR

   .. method:: axes

      () -> List[str]
      Get the axes of the array

   .. method:: dims

      () -> int
      Get the number of dimensions of the array

   .. method:: voxel_size

      () -> Coordinate
      Get the voxel size of the array

   .. method:: roi

      () -> Roi
      Get the region of interest of the array

   .. method:: writable

      () -> bool
      Get whether the array is writable

   .. method:: dtype

      () -> type
      Get the data type of the array

   .. method:: num_channels

      () -> int
      Get the number of channels in the array

   .. method:: data

      () -> np.ndarray
      Get the data of the array

   .. method:: attrs

      () -> dict
      Get the attributes of the array

   .. method:: __getitem__

      (roi: Roi) -> np.ndarray
      Get the data of the array in the region of interest

   .. method:: _can_neuroglance

      () -> bool
      Get whether the array can be visualized in neuroglance

   .. method:: _neuroglancer_source

      () -> dict
      Get the neuroglancer source of the array

   .. method:: _neuroglancer_layer

      () -> Tuple[neuroglancer.Layer, dict]
      Get the neuroglancer layer of the array

   .. method:: _source_name

      () -> str
      Get the name of the source array

   .. rubric:: Notes

   The LogicalOrArray class is used to create a LogicalOrArray. The LogicalOrArray
   class is a subclass of the Array class.


   .. py:property:: axes
      Get the axes of the array

      :returns: The axes of the array
      :rtype: List[str]

      :raises ValueError: If the array is not writable

      .. rubric:: Examples

      >>> array_config = MergeInstancesArrayConfig(
      ...     name="logical_or",
      ...     source_array_configs=[
      ...         ArrayConfig(
      ...             name="mask1",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask1",
      ...                 mask_id=1,
      ...             ),
      ...         ),
      ...         ArrayConfig(
      ...             name="mask2",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask2",
      ...                 mask_id=2,
      ...             ),
      ...         ),
      ...     ],
      ... )
      >>> array = array_config.create_array()
      >>> array.axes
      ['x', 'y', 'z']

      .. rubric:: Notes

      The axes method is used to get the axes of the array. The axes are the dimensions
      of the array.


   .. py:property:: dims
      :type: int

      Get the number of dimensions of the array

      :returns: The number of dimensions of the array
      :rtype: int

      :raises ValueError: If the array is not writable

      .. rubric:: Examples

      >>> array_config = MergeInstancesArrayConfig(
      ...     name="logical_or",
      ...     source_array_configs=[
      ...         ArrayConfig(
      ...             name="mask1",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask1",
      ...                 mask_id=1,
      ...             ),
      ...         ),
      ...         ArrayConfig(
      ...             name="mask2",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask2",
      ...                 mask_id=2,
      ...             ),
      ...         ),
      ...     ],
      ... )
      >>> array = array_config.create_array()
      >>> array.dims
      3

      .. rubric:: Notes

      The dims method is used to get the number of dimensions of the array. The number
      of dimensions is the number of axes of the array.


   .. py:property:: voxel_size
      :type: funlib.geometry.Coordinate

      Get the voxel size of the array

      :returns: The voxel size of the array
      :rtype: Coordinate

      :raises ValueError: If the array is not writable

      .. rubric:: Examples

      >>> array_config = MergeInstancesArrayConfig(
      ...     name="logical_or",
      ...     source_array_configs=[
      ...         ArrayConfig(
      ...             name="mask1",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask1",
      ...                 mask_id=1,
      ...             ),
      ...         ),
      ...         ArrayConfig(
      ...             name="mask2",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask2",
      ...                 mask_id=2,
      ...             ),
      ...         ),
      ...     ],
      ... )
      >>> array = array_config.create_array()
      >>> array.voxel_size
      Coordinate(x=1.0, y=1.0, z=1.0)

      .. rubric:: Notes

      The voxel_size method is used to get the voxel size of the array. The voxel size
      is the size of a voxel in the array.


   .. py:property:: roi
      :type: funlib.geometry.Roi

      Get the region of interest of the array

      :returns: The region of interest of the array
      :rtype: Roi

      :raises ValueError: If the array is not writable

      .. rubric:: Examples

      >>> array_config = MergeInstancesArrayConfig(
      ...     name="logical_or",
      ...     source_array_configs=[
      ...         ArrayConfig(
      ...             name="mask1",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask1",
      ...                 mask_id=1,
      ...             ),
      ...         ),
      ...         ArrayConfig(
      ...             name="mask2",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask2",
      ...                 mask_id=2,
      ...             ),
      ...         ),
      ...     ],
      ... )
      >>> array = array_config.create_array()
      >>> array.roi
      Roi(offset=(0, 0, 0), shape=(10, 10, 10))

      .. rubric:: Notes

      The roi method is used to get the region of interest of the array. The region of
      interest is the shape and offset of the array.


   .. py:property:: writable
      :type: bool

      Get whether the array is writable

      :returns: Whether the array is writable
      :rtype: bool

      :raises ValueError: If the array is not writable

      .. rubric:: Examples

      >>> array_config = MergeInstancesArrayConfig(
      ...     name="logical_or",
      ...     source_array_configs=[
      ...         ArrayConfig(
      ...             name="mask1",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask1",
      ...                 mask_id=1,
      ...             ),
      ...         ),
      ...         ArrayConfig(
      ...             name="mask2",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask2",
      ...                 mask_id=2,
      ...             ),
      ...         ),
      ...     ],
      ... )
      >>> array = array_config.create_array()
      >>> array.writable
      False

      .. rubric:: Notes

      The writable method is used to get whether the array is writable. An array is
      writable if it can be modified.


   .. py:property:: dtype
      Get the data type of the array

      :returns: The data type of the array
      :rtype: type

      :raises ValueError: If the array is not writable

      .. rubric:: Examples

      >>> array_config = MergeInstancesArrayConfig(
      ...     name="logical_or",
      ...     source_array_configs=[
      ...         ArrayConfig(
      ...             name="mask1",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask1",
      ...                 mask_id=1,
      ...             ),
      ...         ),
      ...         ArrayConfig(
      ...             name="mask2",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask2",
      ...                 mask_id=2,
      ...             ),
      ...         ),
      ...     ],
      ... )
      >>> array = array_config.create_array()
      >>> array.dtype
      <class 'numpy.uint8'>

      .. rubric:: Notes

      The dtype method is used to get the data type of the array. The data type is the
      type of the data in the array.


   .. py:property:: num_channels
      Get the number of channels in the array

      :returns: The number of channels in the array
      :rtype: int

      :raises ValueError: If the array is not writable

      .. rubric:: Examples

      >>> array_config = MergeInstancesArrayConfig(
      ...     name="logical_or",
      ...     source_array_configs=[
      ...         ArrayConfig(
      ...             name="mask1",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask1",
      ...                 mask_id=1,
      ...             ),
      ...         ),
      ...         ArrayConfig(
      ...             name="mask2",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask2",
      ...                 mask_id=2,
      ...             ),
      ...         ),
      ...     ],
      ... )
      >>> array = array_config.create_array()
      >>> array.num_channels
      1

      .. rubric:: Notes

      The num_channels method is used to get the number of channels in the array. The
      number of channels is the number of channels in the array.


   .. py:property:: data
      Get the data of the array

      :returns: The data of the array
      :rtype: np.ndarray

      :raises ValueError: If the array is not writable

      .. rubric:: Examples

      >>> array_config = MergeInstancesArrayConfig(
      ...     name="logical_or",
      ...     source_array_configs=[
      ...         ArrayConfig(
      ...             name="mask1",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask1",
      ...                 mask_id=1,
      ...             ),
      ...         ),
      ...         ArrayConfig(
      ...             name="mask2",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask2",
      ...                 mask_id=2,
      ...             ),
      ...         ),
      ...     ],
      ... )
      >>> array = array_config.create_array()
      >>> array.data
      array([[[1, 1, 1, ..., 1, 1, 1],
              [1, 1, 1, ..., 1, 1, 1],
              [1, 1, 1, ..., 1, 1, 1],
              ...,
              [1, 1, 1, ..., 1, 1, 1],
              [1, 1, 1, ..., 1, 1, 1],
              [1, 1, 1, ..., 1, 1, 1]]], dtype=uint8)

      .. rubric:: Notes

      The data method is used to get the data of the array. The data is the content of
      the array.


   .. py:property:: attrs
      Get the attributes of the array

      :returns: The attributes of the array
      :rtype: dict

      :raises ValueError: If the array is not writable

      .. rubric:: Examples

      >>> array_config = MergeInstancesArrayConfig(
      ...     name="logical_or",
      ...     source_array_configs=[
      ...         ArrayConfig(
      ...             name="mask1",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask1",
      ...                 mask_id=1,
      ...             ),
      ...         ),
      ...         ArrayConfig(
      ...             name="mask2",
      ...             array_type=MaskArray,
      ...             source_array_config=MaskArrayConfig(
      ...                 name="mask2",
      ...                 mask_id=2,
      ...             ),
      ...         ),
      ...     ],
      ... )
      >>> array = array_config.create_array()
      >>> array.attrs
      {'name': 'logical_or'}

      .. rubric:: Notes

      The attrs method is used to get the attributes of the array. The attributes are
      the metadata of the array.


