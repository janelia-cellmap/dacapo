dacapo.experiments.datasplits.datasets.arrays.concat_array
==========================================================

.. py:module:: dacapo.experiments.datasplits.datasets.arrays.concat_array


Attributes
----------

.. autoapisummary::

   dacapo.experiments.datasplits.datasets.arrays.concat_array.logger


Classes
-------

.. autoapisummary::

   dacapo.experiments.datasplits.datasets.arrays.concat_array.Array
   dacapo.experiments.datasplits.datasets.arrays.concat_array.ConcatArray


Module Contents
---------------

.. py:class:: Array



   An Array is a multi-dimensional array of data that can be read from and written to. It is
   defined by a region of interest (ROI) in world units, a voxel size, and a number of spatial
   dimensions. The data is stored in a numpy array, and can be accessed using numpy-like slicing
   syntax.

   The Array class is an abstract base class that defines the interface for all Array
   implementations. It provides a number of properties that must be implemented by subclasses,
   such as the ROI, voxel size, and data type of the array. It also provides a method for fetching
   data from the array, which is implemented by slicing the numpy array.

   The Array class also provides a method for checking if the array can be visualized in
   Neuroglancer, and a method for generating a Neuroglancer layer for the array. These methods are
   implemented by subclasses that support visualization in Neuroglancer.

   .. attribute:: attrs

      A dictionary of metadata attributes stored on this array.

      :type: Dict[str, Any]

   .. attribute:: axes

      The axes of this dataset as a string of characters, as they are indexed.
      Permitted characters are:
          * ``zyx`` for spatial dimensions
          * ``c`` for channels
          * ``s`` for samples

      :type: List[str]

   .. attribute:: dims

      The number of spatial dimensions.

      :type: int

   .. attribute:: voxel_size

      The size of a voxel in physical units.

      :type: Coordinate

   .. attribute:: roi

      The total ROI of this array, in world units.

      :type: Roi

   .. attribute:: dtype

      The dtype of this array, in numpy dtypes

      :type: Any

   .. attribute:: num_channels

      The number of channels provided by this dataset. Should return
      None if the channel dimension doesn't exist.

      :type: Optional[int]

   .. attribute:: data

      A numpy-like readable and writable view into this array.

      :type: np.ndarray

   .. attribute:: writable

      Can we write to this Array?

      :type: bool

   .. method:: __getitem__(self, roi

      Roi) -> np.ndarray: Get a numpy like readable and writable view into
      this array.

   .. method:: _can_neuroglance(self) -> bool

      Check if this array can be visualized in Neuroglancer.

   .. method:: _neuroglancer_layer(self)

      Generate a Neuroglancer layer for this array.

   .. method:: _slices(self, roi

      Roi) -> Iterable[slice]: Generate a list of slices for the given ROI.

   .. note::

      This class is used to define the interface for all Array implementations. It provides a
      number of properties that must be implemented by subclasses, such as the ROI, voxel size, and
      data type of the array. It also provides a method for fetching data from the array, which is
      implemented by slicing the numpy array. The Array class also provides a method for checking
      if the array can be visualized in Neuroglancer, and a method for generating a Neuroglancer
      layer for the array. These methods are implemented by subclasses that support visualization
      in Neuroglancer.


   .. py:property:: attrs
      :type: Dict[str, Any]

      :abstractmethod:

      Return a dictionary of metadata attributes stored on this array.

      :returns: A dictionary of metadata attributes stored on this array.
      :rtype: Dict[str, Any]

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.attrs
      {}

      .. note:: This method must be implemented by the subclass.


   .. py:property:: axes
      :type: List[str]

      :abstractmethod:

      Returns the axes of this dataset as a string of charactes, as they
      are indexed. Permitted characters are:

          * ``zyx`` for spatial dimensions
          * ``c`` for channels
          * ``s`` for samples

      :returns: The axes of this dataset as a string of characters, as they are indexed.
      :rtype: List[str]

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.axes
      ['z', 'y', 'x']

      .. note:: This method must be implemented by the subclass.


   .. py:property:: dims
      :type: int

      :abstractmethod:

      Returns the number of spatial dimensions.

      :returns: The number of spatial dimensions.
      :rtype: int

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.dims
      3

      .. note:: This method must be implemented by the subclass.


   .. py:property:: voxel_size
      :type: funlib.geometry.Coordinate

      :abstractmethod:

      The size of a voxel in physical units.

      :returns: The size of a voxel in physical units.
      :rtype: Coordinate

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.voxel_size
      Coordinate((1, 1, 1))

      .. note:: This method must be implemented by the subclass.


   .. py:property:: roi
      :type: funlib.geometry.Roi

      :abstractmethod:

      The total ROI of this array, in world units.

      :returns: The total ROI of this array, in world units.
      :rtype: Roi

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.roi
      Roi(offset=Coordinate((0, 0, 0)), shape=Coordinate((100, 100, 100)))

      .. note:: This method must be implemented by the subclass.


   .. py:property:: dtype
      :type: Any

      :abstractmethod:

      The dtype of this array, in numpy dtypes

      :returns: The dtype of this array, in numpy dtypes.
      :rtype: Any

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.dtype
      np.dtype('uint8')

      .. note:: This method must be implemented by the subclass.


   .. py:property:: num_channels
      :type: Optional[int]

      :abstractmethod:

      The number of channels provided by this dataset.
      Should return None if the channel dimension doesn't exist.

      :returns: The number of channels provided by this dataset.
      :rtype: Optional[int]

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.num_channels
      1

      .. note:: This method must be implemented by the subclass.


   .. py:property:: data
      :type: numpy.ndarray

      :abstractmethod:

      Get a numpy like readable and writable view into this array.

      :returns: A numpy like readable and writable view into this array.
      :rtype: np.ndarray

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.data
      np.ndarray

      .. note:: This method must be implemented by the subclass.


   .. py:property:: writable
      :type: bool

      :abstractmethod:

      Can we write to this Array?

      :returns: Can we write to this Array?
      :rtype: bool

      :raises NotImplementedError: This method must be implemented by the subclass.

      .. rubric:: Examples

      >>> array = Array()
      >>> array.writable
      False

      .. note:: This method must be implemented by the subclass.


.. py:data:: logger

.. py:class:: ConcatArray(array_config)



   This is a wrapper around other `source_arrays` that concatenates
   them along the channel dimension. The `source_arrays` are expected
   to have the same shape and ROI, but can have different data types.

   .. attribute:: name

      The name of the array.

   .. attribute:: channels

      The list of channel names.

   .. attribute:: source_arrays

      A dictionary mapping channel names to source arrays.

   .. attribute:: default_array

      An optional default array to use for channels that are
      not present in `source_arrays`.

   .. method:: from_toml(cls, toml_path

      str) -> ConcatArrayConfig:
      Load the ConcatArrayConfig from a TOML file

   .. method:: to_toml(self, toml_path

      str) -> None:
      Save the ConcatArrayConfig to a TOML file

   .. method:: create_array(self) -> ConcatArray

      
      Create the ConcatArray from the config

   .. note::

      This class is a subclass of Array and inherits all its attributes
      and methods. The only difference is that the array_type is ConcatArray.


   .. py:property:: attrs
      Return the attributes of the ConcatArray as a dictionary.

      :returns: The attributes of the ConcatArray.
      :rtype: Dict[str, Any]

      :raises AssertionError: If the source arrays have different attributes.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.attrs
      {'axes': 'cxyz', 'roi': Roi(...), 'voxel_size': (1, 1, 1)}

      .. note:: The `source_arrays` are expected to have the same attributes.


   .. py:property:: source_arrays
      :type: Dict[str, dacapo.experiments.datasplits.datasets.arrays.array.Array]

      Return the source arrays of the ConcatArray.

      :returns: The source arrays of the ConcatArray.
      :rtype: Dict[str, Array]

      :raises AssertionError: If the source arrays are empty.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.source_arrays
      {'A': Array(...), 'B': Array(...)}

      .. note:: The `source_arrays` are expected to have the same shape and ROI.


   .. py:property:: source_array
      :type: dacapo.experiments.datasplits.datasets.arrays.array.Array

      Return the source array of the ConcatArray.

      :returns: The source array of the ConcatArray.
      :rtype: Array

      :raises AssertionError: If the source array is None.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.source_array
      Array(...)

      .. note:: The `source_array` is expected to have the same shape and ROI.


   .. py:property:: axes
      Return the axes of the ConcatArray.

      :returns: The axes of the ConcatArray.
      :rtype: str

      :raises AssertionError: If the source arrays have different axes.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.axes
      'cxyz'

      .. note:: The `source_arrays` are expected to have the same axes.


   .. py:property:: dims
      Return the dimensions of the ConcatArray.

      :returns: The dimensions of the ConcatArray.
      :rtype: Tuple[int]

      :raises AssertionError: If the source arrays have different dimensions.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.dims
      (2, 100, 100, 100)

      .. note:: The `source_arrays` are expected to have the same dimensions.


   .. py:property:: voxel_size
      Return the voxel size of the ConcatArray.

      :returns: The voxel size of the ConcatArray.
      :rtype: Tuple[float]

      :raises AssertionError: If the source arrays have different voxel sizes.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.voxel_size
      (1, 1, 1)

      .. note:: The `source_arrays` are expected to have the same voxel size.


   .. py:property:: roi
      Return the ROI of the ConcatArray.

      :returns: The ROI of the ConcatArray.
      :rtype: Roi

      :raises AssertionError: If the source arrays have different ROIs.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.roi
      Roi(...)

      .. note:: The `source_arrays` are expected to have the same ROI.


   .. py:property:: writable
      :type: bool

      Return whether the ConcatArray is writable.

      :returns: Whether the ConcatArray is writable.
      :rtype: bool

      :raises AssertionError: If the ConcatArray is writable.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.writable
      False

      .. note:: The ConcatArray is not writable.


   .. py:property:: data
      Return the data of the ConcatArray.

      :returns: The data of the ConcatArray.
      :rtype: np.ndarray

      :raises RuntimeError: If the ConcatArray is not writable.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.data
      np.ndarray(...)

      .. note:: The ConcatArray is not writable.


   .. py:property:: dtype
      Return the data type of the ConcatArray.

      :returns: The data type of the ConcatArray.
      :rtype: np.dtype

      :raises AssertionError: If the source arrays have different data types.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.dtype
      np.float32

      .. note:: The `source_arrays` are expected to have the same data type.


   .. py:property:: num_channels
      Return the number of channels of the ConcatArray.

      :returns: The number of channels of the ConcatArray.
      :rtype: int

      :raises AssertionError: If the source arrays have different numbers of channels.

      .. rubric:: Examples

      >>> config = ConcatArrayConfig(
      ...     name="my_concat_array",
      ...     channels=["A", "B"],
      ...     source_array_configs={
      ...         "A": ArrayConfig(...),
      ...         "B": ArrayConfig(...),
      ...     },
      ...     default_config=ArrayConfig(...),
      ... )
      >>> array = ConcatArray(config)
      >>> array.num_channels
      2

      .. note:: The `source_arrays` are expected to have the same number of channels.


