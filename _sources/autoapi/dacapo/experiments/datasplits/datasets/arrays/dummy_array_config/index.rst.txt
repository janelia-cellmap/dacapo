dacapo.experiments.datasplits.datasets.arrays.dummy_array_config
================================================================

.. py:module:: dacapo.experiments.datasplits.datasets.arrays.dummy_array_config


Classes
-------

.. autoapisummary::

   dacapo.experiments.datasplits.datasets.arrays.dummy_array_config.ArrayConfig
   dacapo.experiments.datasplits.datasets.arrays.dummy_array_config.DummyArray
   dacapo.experiments.datasplits.datasets.arrays.dummy_array_config.DummyArrayConfig


Module Contents
---------------

.. py:class:: ArrayConfig

   Base class for array configurations. Each subclass of an
   `Array` should have a corresponding config class derived from
   `ArrayConfig`. This class should be used to store the configuration
   of the array.

   .. attribute:: name

      A unique name for this array. This will be saved so you
      and others can find and reuse this array. Keep it short
      and avoid special characters.

      :type: str

   .. method:: verify(self) -> Tuple[bool, str]

      This method is used to check whether this is a valid Array.

   .. note::

      This class is used to create a base class for array configurations. Each subclass of an
      `Array` should have a corresponding config class derived from `ArrayConfig`.
      This class should be used to store the configuration of the array.


   .. py:attribute:: name
      :type:  str


   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Array

      :returns: A tuple with the first element being a boolean
                indicating whether the array is valid and the second element being
                a string with a message explaining why the array is invalid
      :rtype: Tuple[bool, str]

      :raises NotImplementedError: This method is not implemented in this class

      .. rubric:: Examples

      >>> array_config = ArrayConfig(name="array_config")
      >>> array_config.verify()
      (True, "No validation for this Array")

      .. note:: This method is used to check whether this is a valid Array.



.. py:class:: DummyArray(array_config)



   This is just a dummy array for testing. It has a shape of (100, 50, 50) and is filled with zeros.

   .. attribute:: array_config

      The config object for the array

      :type: ArrayConfig

   .. method:: __getitem__

      Returns the intensities normalized to the range (0, 1)

   .. rubric:: Notes

   The array_config must be an ArrayConfig object.
   The min and max values are used to normalize the intensities.
   All intensities are converted to float32.


   .. py:property:: attrs
      Returns the attributes of the source array

      :returns: The attributes of the source array
      :rtype: dict

      :raises ValueError: If the attributes is not a dictionary

      .. rubric:: Examples

      >>> intensities_array.attrs
      {'resolution': (1.0, 1.0, 1.0), 'unit': 'micrometer'}


   .. py:property:: axes
      Returns the axes of the source array

      :returns: The axes of the source array
      :rtype: str

      :raises ValueError: If the axes is not a string

      .. rubric:: Examples

      >>> intensities_array.axes
      'zyx'

      .. rubric:: Notes

      The axes are the same as the source array


   .. py:property:: dims
      Returns the number of dimensions of the source array

      :returns: The number of dimensions of the source array
      :rtype: int

      :raises ValueError: If the dims is not an integer

      .. rubric:: Examples

      >>> intensities_array.dims
      3

      .. rubric:: Notes

      The dims are the same as the source array


   .. py:property:: voxel_size
      Returns the voxel size of the source array

      :returns: The voxel size of the source array
      :rtype: Coordinate

      :raises ValueError: If the voxel size is not a Coordinate object

      .. rubric:: Examples

      >>> intensities_array.voxel_size
      Coordinate(x=1.0, y=1.0, z=1.0)

      .. rubric:: Notes

      The voxel size is the same as the source array


   .. py:property:: roi
      Returns the region of interest of the source array

      :returns: The region of interest of the source array
      :rtype: Roi

      :raises ValueError: If the roi is not a Roi object

      .. rubric:: Examples

      >>> intensities_array.roi
      Roi(offset=(0, 0, 0), shape=(100, 100, 100))

      .. rubric:: Notes

      The roi is the same as the source array


   .. py:property:: writable
      :type: bool

      Returns whether the array is writable

      :returns: Whether the array is writable
      :rtype: bool

      .. rubric:: Examples

      >>> intensities_array.writable
      True

      .. rubric:: Notes

      The array is always writable


   .. py:property:: data
      Returns the data of the source array

      :returns: The data of the source array
      :rtype: np.ndarray

      :raises ValueError: If the data is not a numpy array

      .. rubric:: Examples

      >>> intensities_array.data
      array([[[0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.],
              ...,
              [0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.],
              [0., 0., 0., ..., 0., 0., 0.]],

      .. rubric:: Notes

      The data is the same as the source array


   .. py:property:: dtype
      Returns the data type of the array

      :returns: The data type of the array
      :rtype: type

      :raises ValueError: If the data type is not a type

      .. rubric:: Examples

      >>> intensities_array.dtype
      numpy.float32

      .. rubric:: Notes

      The data type is the same as the source array


   .. py:property:: num_channels
      Returns the number of channels in the source array

      :returns: The number of channels in the source array
      :rtype: int

      :raises ValueError: If the number of channels is not an integer

      .. rubric:: Examples

      >>> intensities_array.num_channels
      1

      .. rubric:: Notes

      The number of channels is the same as the source array


.. py:class:: DummyArrayConfig



   This is just a dummy array  config used for testing. None of the
   attributes have any particular meaning. It is used to test the
   ArrayConfig class.

   .. method:: to_array

      Returns the DummyArray object

   .. method:: verify

      Returns whether the DummyArrayConfig is valid

   .. rubric:: Notes

   The source_array_config must be an ArrayConfig object.


   .. py:attribute:: array_type


   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Array

      :returns: Whether the Array is valid and a message
      :rtype: Tuple[bool, str]

      :raises ValueError: If the source is not a tuple of strings

      .. rubric:: Examples

      >>> dummy_array_config = DummyArrayConfig(...)
      >>> dummy_array_config.verify()
      (False, "This is a DummyArrayConfig and is never valid")

      .. rubric:: Notes

      The source must be a tuple of strings.



