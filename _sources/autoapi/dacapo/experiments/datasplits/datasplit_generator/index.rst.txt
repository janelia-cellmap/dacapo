dacapo.experiments.datasplits.datasplit_generator
=================================================

.. py:module:: dacapo.experiments.datasplits.datasplit_generator


Attributes
----------

.. autoapisummary::

   dacapo.experiments.datasplits.datasplit_generator.logger


Classes
-------

.. autoapisummary::

   dacapo.experiments.datasplits.datasplit_generator.TaskConfig
   dacapo.experiments.datasplits.datasplit_generator.ZarrArrayConfig
   dacapo.experiments.datasplits.datasplit_generator.ZarrArray
   dacapo.experiments.datasplits.datasplit_generator.ResampledArrayConfig
   dacapo.experiments.datasplits.datasplit_generator.BinarizeArrayConfig
   dacapo.experiments.datasplits.datasplit_generator.IntensitiesArrayConfig
   dacapo.experiments.datasplits.datasplit_generator.ConcatArrayConfig
   dacapo.experiments.datasplits.datasplit_generator.RawGTDatasetConfig
   dacapo.experiments.datasplits.datasplit_generator.CustomEnumMeta
   dacapo.experiments.datasplits.datasplit_generator.CustomEnum
   dacapo.experiments.datasplits.datasplit_generator.DatasetType
   dacapo.experiments.datasplits.datasplit_generator.SegmentationType
   dacapo.experiments.datasplits.datasplit_generator.DatasetSpec
   dacapo.experiments.datasplits.datasplit_generator.DataSplitGenerator


Functions
---------

.. autoapisummary::

   dacapo.experiments.datasplits.datasplit_generator.is_zarr_group
   dacapo.experiments.datasplits.datasplit_generator.resize_if_needed
   dacapo.experiments.datasplits.datasplit_generator.get_right_resolution_array_config
   dacapo.experiments.datasplits.datasplit_generator.generate_dataspec_from_csv
   dacapo.experiments.datasplits.datasplit_generator.format_class_name


Module Contents
---------------

.. py:class:: TaskConfig

   Base class for task configurations. Each subclass of a `Task` should
   have a corresponding config class derived from `TaskConfig`.

   .. attribute:: name

      A unique name for this task. This will be saved so you and
      others can find and reuse this task. Keep it short and avoid
      special characters.

   .. method:: verify(self) -> Tuple[bool, str]

      This method verifies the TaskConfig object.

   .. rubric:: Notes

   This is a base class for all task configurations. It is not meant to be
   used directly.


   .. py:attribute:: name
      :type:  str


   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Task

      :returns:

                A tuple containing a boolean value indicating whether the TaskConfig object is valid
                    and a string containing the reason why the object is invalid.
      :rtype: Tuple[bool, str]

      :raises NotImplementedError: This method is not implemented.

      .. rubric:: Examples

      >>> valid, reason = task_config.verify()



.. py:class:: ZarrArrayConfig



   This config class provides the necessary configuration for a zarr array.

   A zarr array is a container for large, multi-dimensional arrays. It is similar to HDF5, but is designed to work
   with large arrays that do not fit into memory. Zarr arrays can be stored on disk or in the cloud
   and can be accessed concurrently by multiple processes. Zarr arrays can be compressed and
   support chunked, N-dimensional arrays.

   .. attribute:: file_name

      Path
      The file name of the zarr container.

   .. attribute:: dataset

      str
      The name of your dataset. May include '/' characters for nested heirarchies

   .. attribute:: snap_to_grid

      Optional[Coordinate]
      If you need to make sure your ROI's align with a specific voxel_size

   .. attribute:: _axes

      Optional[List[str]]
      The axes of your data!

   .. method:: verify() -> Tuple[bool, str]

      
      Check whether this is a valid Array

   .. note:: This class is a subclass of ArrayConfig.


   .. py:attribute:: array_type


   .. py:attribute:: file_name
      :type:  upath.UPath


   .. py:attribute:: dataset
      :type:  str


   .. py:attribute:: snap_to_grid
      :type:  Optional[funlib.geometry.Coordinate]


   .. py:attribute:: mode
      :type:  Optional[str]


   .. py:method:: verify() -> Tuple[bool, str]

      Check whether this is a valid Array

      :returns: A tuple of a boolean and a string. The boolean indicates whether the Array is valid or not.
                The string provides a reason why the Array is not valid.
      :rtype: Tuple[bool, str]

      :raises NotImplementedError: This method is not implemented for this Array

      .. rubric:: Examples

      >>> zarr_array_config = ZarrArrayConfig(
      ...     file_name=Path("data.zarr"),
      ...     dataset="data",
      ...     snap_to_grid=Coordinate(1, 1, 1),
      ...     _axes=["x", "y", "z"]
      ... )
      >>> zarr_array_config.verify()
      (True, 'No validation for this Array')

      .. note:: This method is not implemented for this Array



.. py:class:: ZarrArray(array_config)



   This is a zarr array.

   .. attribute:: name

      The name of the array.

      :type: str

   .. attribute:: file_name

      The file name of the array.

      :type: Path

   .. attribute:: dataset

      The dataset name.

      :type: str

   .. attribute:: _axes

      The axes of the array.

      :type: Optional[List[str]]

   .. attribute:: snap_to_grid

      The snap to grid.

      :type: Optional[Coordinate]

   .. method:: __init__(array_config)

      
      Initializes the array type 'raw' and name for the DummyDataset instance.

   .. method:: __str__()

      
      Returns the string representation of the ZarrArray.

   .. method:: __repr__()

      
      Returns the string representation of the ZarrArray.

   .. method:: attrs()

      
      Returns the attributes of the array.

   .. method:: axes()

      
      Returns the axes of the array.

   .. method:: dims()

      
      Returns the dimensions of the array.

   .. method:: _daisy_array()

      
      Returns the daisy array.

   .. method:: voxel_size()

      
      Returns the voxel size of the array.

   .. method:: roi()

      
      Returns the region of interest of the array.

   .. method:: writable()

      
      Returns the boolean value of the array.

   .. method:: dtype()

      
      Returns the data type of the array.

   .. method:: num_channels()

      
      Returns the number of channels of the array.

   .. method:: spatial_axes()

      
      Returns the spatial axes of the array.

   .. method:: data()

      
      Returns the data of the array.

   .. method:: __getitem__(roi)

      
      Returns the data of the array for the given region of interest.

   .. method:: __setitem__(roi, value)

      
      Sets the data of the array for the given region of interest.

   .. method:: create_from_array_identifier(array_identifier, axes, roi, num_channels, voxel_size, dtype, write_size=None, name=None, overwrite=False)

      
      Creates a new ZarrArray given an array identifier.

   .. method:: open_from_array_identifier(array_identifier, name="")

      
      Opens a new ZarrArray given an array identifier.

   .. method:: _can_neuroglance()

      
      Returns the boolean value of the array.

   .. method:: _neuroglancer_source()

      
      Returns the neuroglancer source of the array.

   .. method:: _neuroglancer_layer()

      
      Returns the neuroglancer layer of the array.

   .. method:: _transform_matrix()

      
      Returns the transform matrix of the array.

   .. method:: _output_dimensions()

      
      Returns the output dimensions of the array.

   .. method:: _source_name()

      
      Returns the source name of the array.

   .. method:: add_metadata(metadata)

      
      Adds metadata to the array.

   .. rubric:: Notes

   This class is used to create a zarr array.


   .. py:property:: mode


   .. py:property:: attrs
      Returns the attributes of the array.

      :param attrs: The attributes of the array.
      :type attrs: Any

      :returns: The attributes of the array.
      :rtype: Any

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> attrs()

      .. rubric:: Notes

      This method is used to return the attributes of the array.


   .. py:property:: axes
      Returns the axes of the array.

      :param axes: The axes of the array.
      :type axes: List[str]

      :returns: The axes of the array.
      :rtype: List[str]

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> axes()

      .. rubric:: Notes

      This method is used to return the axes of the array.


   .. py:property:: dims
      :type: int

      Returns the dimensions of the array.

      :param dims: The dimensions of the array.
      :type dims: int

      :returns: The dimensions of the array.
      :rtype: int

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> dims()

      .. rubric:: Notes

      This method is used to return the dimensions of the array.


   .. py:method:: voxel_size() -> funlib.geometry.Coordinate

      Returns the voxel size of the array.

      :param voxel_size: The voxel size.
      :type voxel_size: Coordinate

      :returns: The voxel size of the array.
      :rtype: Coordinate

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> voxel_size()

      .. rubric:: Notes

      This method is used to return the voxel size of the array.



   .. py:method:: roi() -> funlib.geometry.Roi

      Returns the region of interest of the array.

      :param roi: The region of interest.
      :type roi: Roi

      :returns: The region of interest of the array.
      :rtype: Roi

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> roi()

      .. rubric:: Notes

      This method is used to return the region of interest of the array.



   .. py:property:: writable
      :type: bool

      Returns the boolean value of the array.

      :param writable: The boolean value of the array.
      :type writable: bool

      :returns: The boolean value of the array.
      :rtype: bool

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> writable()

      .. rubric:: Notes

      This method is used to return the boolean value of the array.


   .. py:property:: dtype
      :type: Any

      Returns the data type of the array.

      :param dtype: The data type of the array.
      :type dtype: Any

      :returns: The data type of the array.
      :rtype: Any

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> dtype()

      .. rubric:: Notes

      This method is used to return the data type of the array.


   .. py:property:: num_channels
      :type: Optional[int]

      Returns the number of channels of the array.

      :param num_channels: The number of channels of the array.
      :type num_channels: Optional[int]

      :returns: The number of channels of the array.
      :rtype: Optional[int]

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> num_channels()

      .. rubric:: Notes

      This method is used to return the number of channels of the array.


   .. py:property:: spatial_axes
      :type: List[str]

      Returns the spatial axes of the array.

      :param spatial_axes: The spatial axes of the array.
      :type spatial_axes: List[str]

      :returns: The spatial axes of the array.
      :rtype: List[str]

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> spatial_axes()

      .. rubric:: Notes

      This method is used to return the spatial axes of the array.


   .. py:property:: data
      :type: Any

      Returns the data of the array.

      :param data: The data of the array.
      :type data: Any

      :returns: The data of the array.
      :rtype: Any

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> data()

      .. rubric:: Notes

      This method is used to return the data of the array.


   .. py:method:: create_from_array_identifier(array_identifier, axes, roi, num_channels, voxel_size, dtype, mode='a', write_size=None, name=None, overwrite=False)
      :classmethod:


      Create a new ZarrArray given an array identifier. It is assumed that
      this array_identifier points to a dataset that does not yet exist.

      :param array_identifier: The array identifier.
      :type array_identifier: ArrayIdentifier
      :param axes: The axes of the array.
      :type axes: List[str]
      :param roi: The region of interest.
      :type roi: Roi
      :param num_channels: The number of channels.
      :type num_channels: int
      :param voxel_size: The voxel size.
      :type voxel_size: Coordinate
      :param dtype: The data type.
      :type dtype: Any
      :param write_size: The write size.
      :type write_size: Optional[Coordinate]
      :param name: The name of the array.
      :type name: Optional[str]
      :param overwrite: The boolean value to overwrite the array.
      :type overwrite: bool

      :returns: The ZarrArray.
      :rtype: ZarrArray

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> create_from_array_identifier(array_identifier, axes, roi, num_channels, voxel_size, dtype, write_size=None, name=None, overwrite=False)

      .. rubric:: Notes

      This method is used to create a new ZarrArray given an array identifier.



   .. py:method:: open_from_array_identifier(array_identifier, name='')
      :classmethod:


      Opens a new ZarrArray given an array identifier.

      :param array_identifier: The array identifier.
      :type array_identifier: ArrayIdentifier
      :param name: The name of the array.
      :type name: str

      :returns: The ZarrArray.
      :rtype: ZarrArray

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> open_from_array_identifier(array_identifier, name="")

      .. rubric:: Notes

      This method is used to open a new ZarrArray given an array identifier.



   .. py:method:: add_metadata(metadata: Dict[str, Any]) -> None

      Adds metadata to the array.

      :param metadata: The metadata to add to the array.
      :type metadata: Dict[str, Any]

      :raises NotImplementedError:

      .. rubric:: Examples

      >>> add_metadata(metadata)

      .. rubric:: Notes

      This method is used to add metadata to the array.



.. py:class:: ResampledArrayConfig



   A configuration for a ResampledArray. This array will up or down sample an array into the desired voxel size.

   .. attribute:: source_array_config

      The Array that you want to upsample or downsample.

      :type: ArrayConfig

   .. attribute:: upsample

      The amount by which to upsample!

      :type: Coordinate

   .. attribute:: downsample

      The amount by which to downsample!

      :type: Coordinate

   .. attribute:: interp_order

      The order of the interpolation!

      :type: bool

   .. method:: create_array

      Creates a ResampledArray from the configuration.

   .. note:: This class is meant to be used with the ArrayDataset class.


   .. py:attribute:: array_type


   .. py:attribute:: source_array_config
      :type:  dacapo.experiments.datasplits.datasets.arrays.array_config.ArrayConfig


   .. py:attribute:: upsample
      :type:  funlib.geometry.Coordinate


   .. py:attribute:: downsample
      :type:  funlib.geometry.Coordinate


   .. py:attribute:: interp_order
      :type:  bool


.. py:class:: BinarizeArrayConfig



   This config class provides the necessary configuration for turning an Annotated dataset into a
   multi class binary classification problem. Each class will be binarized into a separate channel.

   .. attribute:: source_array_config

      The Array from which to pull annotated data. Is expected to contain a volume with uint64 voxels and no channel dimension

      :type: ArrayConfig

   .. attribute:: groupings

      List of id groups with a symantic name. Each id group is a List of ids.
      Group i found in groupings[i] will be binarized and placed in channel i.
      An empty group will binarize all non background labels.

      :type: List[Tuple[str, List[int]]]

   .. attribute:: background

      The id considered background. Will never be binarized to 1, defaults to 0.

      :type: int

   .. note::

      This class is used to create a BinarizeArray object which is used to turn an Annotated dataset into a multi class binary classification problem.
      Each class will be binarized into a separate channel.


   .. py:attribute:: array_type


   .. py:attribute:: source_array_config
      :type:  dacapo.experiments.datasplits.datasets.arrays.array_config.ArrayConfig


   .. py:attribute:: groupings
      :type:  List[Tuple[str, List[int]]]


   .. py:attribute:: background
      :type:  int


.. py:class:: IntensitiesArrayConfig



   This config class provides the necessary configuration for turning an Annotated dataset into a
   multi class binary classification problem. It takes a source array and normalizes the intensities
   between 0 and 1. The source array is expected to contain a volume with uint64 voxels and no channel dimension.

   .. attribute:: source_array_config

      The Array from which to pull annotated data

      :type: ArrayConfig

   .. attribute:: min

      The minimum intensity in your data

      :type: float

   .. attribute:: max

      The maximum intensity in your data

      :type: float

   .. method:: to_array

      Returns the IntensitiesArray object

   .. rubric:: Notes

   The source_array_config must be an ArrayConfig object.


   .. py:attribute:: array_type


   .. py:attribute:: source_array_config
      :type:  dacapo.experiments.datasplits.datasets.arrays.array_config.ArrayConfig


   .. py:attribute:: min
      :type:  float


   .. py:attribute:: max
      :type:  float


.. py:class:: ConcatArrayConfig



   This array read data from the source array and then return a np.ones_like() version of the data.

   .. attribute:: channels

      An ordering for the source_arrays.

      :type: List[str]

   .. attribute:: source_array_configs

      A mapping from channels to array_configs. If a channel has no ArrayConfig it will be filled with zeros

      :type: Dict[str, ArrayConfig]

   .. attribute:: default_config

      An optional array providing the default array per channel. If not provided, missing channels will simply be filled with 0s

      :type: Optional[ArrayConfig]

   .. method:: __attrs_post_init__(self)

      This method is called after the instance has been initialized by the constructor. It is used to set the default_config to an instance of ArrayConfig if it is None.

   .. method:: get_array(self, source_arrays

      Dict[str, np.ndarray]) -> np.ndarray: This method reads data from the source array and then return a np.ones_like() version of the data.

   .. note::

      This class is used to create a ConcatArray object which is used to read data from the source array and then return a np.ones_like() version of the data.
      The source array is a dictionary with the key being the channel and the value being the array.


   .. py:attribute:: array_type


   .. py:attribute:: channels
      :type:  List[str]


   .. py:attribute:: source_array_configs
      :type:  Dict[str, dacapo.experiments.datasplits.datasets.arrays.array_config.ArrayConfig]


   .. py:attribute:: default_config
      :type:  Optional[dacapo.experiments.datasplits.datasets.arrays.array_config.ArrayConfig]


.. py:class:: RawGTDatasetConfig



   This is a configuration class for the standard dataset with both raw and GT Array.

   The configuration includes array configurations for raw data, ground truth data and mask data.
   The configuration for ground truth (GT) data is mandatory, whereas configurations for raw
   and mask data are optional. It also includes an optional list of points around which training samples
   will be extracted.

   .. attribute:: dataset_type

      The type of dataset that is being configured.

      :type: class

   .. attribute:: raw_config

      Configuration for the raw data associated with this dataset.

      :type: Optional[ArrayConfig]

   .. attribute:: gt_config

      Configuration for the ground truth data associated with this dataset.

      :type: Optional[ArrayConfig]

   .. attribute:: mask_config

      An optional mask configuration that sets the loss
      equal to zero on voxels where the mask is 1.

      :type: Optional[ArrayConfig]

   .. attribute:: sample_points

      An optional list of points around which
      training samples will be extracted.

      :type: Optional[List[Coordinate]]

   .. method:: verify

      A method to verify the validity of the configuration.

   .. rubric:: Notes

   This class is used to create a configuration object for the standard dataset with both raw and GT Array.


   .. py:attribute:: dataset_type


   .. py:attribute:: raw_config
      :type:  Optional[dacapo.experiments.datasplits.datasets.arrays.ArrayConfig]


   .. py:attribute:: gt_config
      :type:  Optional[dacapo.experiments.datasplits.datasets.arrays.ArrayConfig]


   .. py:attribute:: mask_config
      :type:  Optional[dacapo.experiments.datasplits.datasets.arrays.ArrayConfig]


   .. py:attribute:: sample_points
      :type:  Optional[List[funlib.geometry.Coordinate]]


.. py:data:: logger

.. py:function:: is_zarr_group(file_name: upath.UPath, dataset: str)

   Check if the dataset is a Zarr group. If the dataset is a Zarr group, it will return True, otherwise False.

   :param file_name: str
                     The name of the file.
   :param dataset: str
                   The name of the dataset.

   :returns: True if the dataset is a Zarr group, otherwise False.
   :rtype: bool

   :raises FileNotFoundError: If the file does not exist, a FileNotFoundError is raised.

   .. rubric:: Examples

   >>> is_zarr_group(file_name, dataset)

   .. rubric:: Notes

   This function is used to check if the dataset is a Zarr group.


.. py:function:: resize_if_needed(array_config: dacapo.experiments.datasplits.datasets.arrays.ZarrArrayConfig, target_resolution: funlib.geometry.Coordinate, extra_str='')

   Resize the array if needed. If the array needs to be resized, it will return the resized array, otherwise it will return the original array.

   :param array_config: obj
                        The configuration of the array.
   :param target_resolution: obj
                             The target resolution.
   :param extra_str: str
                     An extra string.

   :returns: The resized array if needed, otherwise the original array.
   :rtype: obj

   :raises FileNotFoundError: If the file does not exist, a FileNotFoundError is raised.

   .. rubric:: Examples

   >>> resize_if_needed(array_config, target_resolution, extra_str)

   .. rubric:: Notes

   This function is used to resize the array if needed.


.. py:function:: get_right_resolution_array_config(container: upath.UPath, dataset, target_resolution, extra_str='')

   Get the right resolution array configuration. It will return the right resolution array configuration.

   :param container: obj
                     The container.
   :param dataset: str
                   The dataset.
   :param target_resolution: obj
                             The target resolution.
   :param extra_str: str
                     An extra string.

   :returns: The right resolution array configuration.
   :rtype: obj

   :raises FileNotFoundError: If the file does not exist, a FileNotFoundError is raised.

   .. rubric:: Examples

   >>> get_right_resolution_array_config(container, dataset, target_resolution, extra_str)

   .. rubric:: Notes

   This function is used to get the right resolution array configuration.


.. py:class:: CustomEnumMeta



   Custom Enum Meta class to raise KeyError when an invalid option is passed.

   .. attribute:: _member_names_

      list
      The list of member names.

   .. method:: __getitem__(self, item)

      
      A method to get the item.

   .. rubric:: Notes

   This class is used to raise KeyError when an invalid option is passed.


.. py:class:: CustomEnum



   A custom Enum class to raise KeyError when an invalid option is passed.

   .. attribute:: __str__

      str
      The string representation of the class.

   .. method:: __str__(self)

      
      A method to get the string representation of the class.

   .. rubric:: Notes

   This class is used to raise KeyError when an invalid option is passed.


.. py:class:: DatasetType



   An Enum class to represent the dataset type. It is derived from `CustomEnum` class.

   .. attribute:: val

      int
      The value of the dataset type.

   .. attribute:: train

      int
      The training dataset type.

   .. method:: __str__(self)

      
      A method to get the string representation of the class.

   .. rubric:: Notes

   This class is used to represent the dataset type.


   .. py:attribute:: val
      :value: 1



   .. py:attribute:: train
      :value: 2



.. py:class:: SegmentationType



   An Enum class to represent the segmentation type. It is derived from `CustomEnum` class.

   .. attribute:: semantic

      int
      The semantic segmentation type.

   .. attribute:: instance

      int
      The instance segmentation type.

   .. method:: __str__(self)

      
      A method to get the string representation of the class.

   .. rubric:: Notes

   This class is used to represent the segmentation type.


   .. py:attribute:: semantic
      :value: 1



   .. py:attribute:: instance
      :value: 2



.. py:class:: DatasetSpec(dataset_type: Union[str, DatasetType], raw_container: Union[str, upath.UPath], raw_dataset: str, gt_container: Union[str, upath.UPath], gt_dataset: str)

   A class for dataset specification. It is used to specify the dataset.

   .. attribute:: dataset_type

      obj
      The dataset type.

   .. attribute:: raw_container

      obj
      The raw container.

   .. attribute:: raw_dataset

      str
      The raw dataset.

   .. attribute:: gt_container

      obj
      The ground truth container.

   .. attribute:: gt_dataset

      str
      The ground truth dataset.

   .. method:: __init__(dataset_type, raw_container, raw_dataset, gt_container, gt_dataset)

      
      Initializes the DatasetSpec class with the specified dataset type, raw container, raw dataset, ground truth container, and ground truth dataset.

   .. method:: __str__(self)

      
      A method to get the string representation of the class.

   .. rubric:: Notes

   This class is used to specify the dataset.


.. py:function:: generate_dataspec_from_csv(csv_path: upath.UPath)

   Generate the dataset specification from the CSV file. It will return the dataset specification.

   :param csv_path: obj
                    The CSV file path.

   :returns: The dataset specification.
   :rtype: list

   :raises FileNotFoundError: If the file does not exist, a FileNotFoundError is raised.

   .. rubric:: Examples

   >>> generate_dataspec_from_csv(csv_path)

   .. rubric:: Notes

   This function is used to generate the dataset specification from the CSV file.


.. py:class:: DataSplitGenerator(name: str, datasets: List[DatasetSpec], input_resolution: Union[Sequence[int], funlib.geometry.Coordinate], output_resolution: Union[Sequence[int], funlib.geometry.Coordinate], targets: Optional[List[str]] = None, segmentation_type: Union[str, SegmentationType] = 'semantic', max_gt_downsample=32, max_gt_upsample=4, max_raw_training_downsample=16, max_raw_training_upsample=2, max_raw_validation_downsample=8, max_raw_validation_upsample=2, min_training_volume_size=8000, raw_min=0, raw_max=255, classes_separator_caracter='&')

   Generates DataSplitConfig for a given task config and datasets.

   Class names in gt_dataset should be within [] e.g. [mito&peroxisome&er] for
   multiple classes or [mito] for one class.

   Currently only supports:
    - semantic segmentation.
    Supports:
       - 2D and 3D datasets.
       - Zarr, N5 and OME-Zarr datasets.
       - Multi class targets.
       - Different resolutions for raw and ground truth datasets.
       - Different resolutions for training and validation datasets.

   .. attribute:: name

      str
      The name of the data split generator.

   .. attribute:: datasets

      list
      The list of dataset specifications.

   .. attribute:: input_resolution

      obj
      The input resolution.

   .. attribute:: output_resolution

      obj
      The output resolution.

   .. attribute:: targets

      list
      The list of targets.

   .. attribute:: segmentation_type

      obj
      The segmentation type.

   .. attribute:: max_gt_downsample

      int
      The maximum ground truth downsample.

   .. attribute:: max_gt_upsample

      int
      The maximum ground truth upsample.

   .. attribute:: max_raw_training_downsample

      int
      The maximum raw training downsample.

   .. attribute:: max_raw_training_upsample

      int
      The maximum raw training upsample.

   .. attribute:: max_raw_validation_downsample

      int
      The maximum raw validation downsample.

   .. attribute:: max_raw_validation_upsample

      int
      The maximum raw validation upsample.

   .. attribute:: min_training_volume_size

      int
      The minimum training volume size.

   .. attribute:: raw_min

      int
      The minimum raw value.

   .. attribute:: raw_max

      int
      The maximum raw value.

   .. attribute:: classes_separator_caracter

      str
      The classes separator character.

   .. method:: __init__(name, datasets, input_resolution, output_resolution, targets, segmentation_type, max_gt_downsample, max_gt_upsample, max_raw_training_downsample, max_raw_training_upsample, max_raw_validation_downsample, max_raw_validation_upsample, min_training_volume_size, raw_min, raw_max, classes_separator_caracter)

      
      Initializes the DataSplitGenerator class with the specified name, datasets, input resolution, output resolution, targets, segmentation type, maximum ground truth downsample, maximum ground truth upsample, maximum raw training downsample, maximum raw training upsample, maximum raw validation downsample, maximum raw validation upsample, minimum training volume size, minimum raw value, maximum raw value, and classes separator character.

   .. method:: __str__(self)

      
      A method to get the string representation of the class.

   .. method:: class_name(self)

      
      A method to get the class name.

   .. method:: check_class_name(self, class_name)

      
      A method to check the class name.

   .. method:: compute(self)

      
      A method to compute the data split.

   .. method:: __generate_semantic_seg_datasplit(self)

      
      A method to generate the semantic segmentation data split.

   .. method:: __generate_semantic_seg_dataset_crop(self, dataset)

      
      A method to generate the semantic segmentation dataset crop.

   .. method:: generate_csv(datasets, csv_path)

      
      A method to generate the CSV file.

   .. method:: generate_from_csv(csv_path, input_resolution, output_resolution, name, **kwargs)

      
      A method to generate the data split from the CSV file.

   .. rubric:: Notes

   - This class is used to generate the DataSplitConfig for a given task config and datasets.
   - Class names in gt_dataset shoulb be within [] e.g. [mito&peroxisome&er] for mutiple classes or [mito] for one class


   .. py:property:: class_name
      Get the class name.

      :param self: obj
                   The object.

      :returns: The class name.
      :rtype: obj

      :raises ValueError:
      :raises If the class name is already set, a ValueError is raised.:

      .. rubric:: Examples

      >>> class_name

      .. rubric:: Notes

      This function is used to get the class name.


   .. py:method:: check_class_name(class_name)

      Check the class name.

      :param self: obj
                   The object.
      :param class_name: obj
                         The class name.

      :returns: The class name.
      :rtype: obj

      :raises ValueError:
      :raises If the class name is already set, a ValueError is raised.:

      .. rubric:: Examples

      >>> check_class_name(class_name)

      .. rubric:: Notes

      This function is used to check the class name.



   .. py:method:: compute()

      Compute the data split.

      :param self: obj
                   The object.

      :returns: The data split.
      :rtype: obj

      :raises NotImplementedError:
      :raises If the segmentation type is not implemented, a NotImplementedError is raised.:

      .. rubric:: Examples

      >>> compute()

      .. rubric:: Notes

      This function is used to compute the data split.



   .. py:method:: generate_from_csv(csv_path: upath.UPath, input_resolution: Union[Sequence[int], funlib.geometry.Coordinate], output_resolution: Union[Sequence[int], funlib.geometry.Coordinate], name: Optional[str] = None, **kwargs)
      :staticmethod:


      Generate the data split from the CSV file.

      :param csv_path: obj
                       The CSV file path.
      :param input_resolution: obj
                               The input resolution.
      :param output_resolution: obj
                                The output resolution.
      :param name: str
                   The name.
      :param \*\*kwargs: dict
                         The keyword arguments.

      :returns: The data split.
      :rtype: obj

      :raises FileNotFoundError:
      :raises If the file does not exist, a FileNotFoundError is raised.:

      .. rubric:: Examples

      >>> generate_from_csv(csv_path, input_resolution, output_resolution, name, **kwargs)

      .. rubric:: Notes

      This function is used to generate the data split from the CSV file.



.. py:function:: format_class_name(class_name, separator_character='&')

   Format the class name.

   :param class_name: obj
                      The class name.
   :param separator_character: str
                               The separator character.

   :returns: The class name.
   :rtype: obj

   :raises ValueError: If the class name is invalid, a ValueError is raised.

   .. rubric:: Examples

   >>> format_class_name(class_name, separator_character)

   .. rubric:: Notes

   This function is used to format the class name.


